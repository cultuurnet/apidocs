{
  "openapi": "3.1.0",
  "info": {
    "title": "museumPASSmusées Partner API",
    "version": "1.0",
    "description": "With museumPASSmusées Partner API you can ....TODO.....\n\n## Postman\n\n<!-- focus: false -->\n\n[![Download postman collection](https://postman.publiq.be/postman-download.svg)](https://postman.publiq.be/?api=mpm-partner-api)\n\nDo you already have a **client id** and **client secret**?\nDownload a personalized Postman collection to start making requests in seconds!",
    "contact": {
      "name": "publiq helpdesk",
      "email": "vragen@publiq.be"
    }
  },
  "servers": [
    {
      "url": "https://partner-api-test.museumpassmusees.be",
      "description": "Testing"
    },
    {
      "url": "https://partner-api.museumpassmusees.be",
      "description": "Production"
    }
  ],
  "components": {
    "schemas": {
      "Error": {
        "$ref": "https://raw.githubusercontent.com/cultuurnet/stoplight-docs-errors/main/models/Error.json",
        "x-internal": true
      },
      "VoucherList": {
        "title": "VoucherList",
        "type": "object",
        "examples": [],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the voucher list. This ID can be used for logging purposes."
          },
          "vouchers": {
            "type": "array",
            "description": "List of vouchers.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "vouchers"
        ]
      },
      "Pass": {
        "title": "Pass",
        "type": "object",
        "examples": [
          {
            "passholderId": "0feb87bd-462d-4f24-a25d-df64ab99300e",
            "firstName": "Sophie",
            "lastName": "Peeters",
            "canDoVisitsNow": true,
            "dateOfBirth": "1983-04-01",
            "subscriptionEndDate": "2022-12-15"
          },
          {
            "passholderId": "0feb87bd-462d-4f24-a25d-df64ab99300e",
            "canDoVisitsNow": true,
            "subscriptionEndDate": "2022-12-15"
          },
          {
            "passholderId": "0feb87bd-462d-4f24-a25d-df64ab99300e",
            "firstName": "Sophie",
            "lastName": "Peeters",
            "canDoVisitsNow": false,
            "dateOfBirth": "1983-04-01",
            "subscriptionEndDate": "2022-01-04"
          },
          {
            "passholderId": "0feb87bd-462d-4f24-a25d-df64ab99300e",
            "canDoVisitsNow": false,
            "subscriptionEndDate": "2022-12-15"
          }
        ],
        "properties": {
          "passholderId": {
            "type": "string",
            "description": "ID of the passholder linked to this pass.",
            "readOnly": true
          },
          "firstName": {
            "type": "string",
            "description": "Firstname of the passholder. **Attention**: this field is not always available.",
            "readOnly": true
          },
          "lastName": {
            "type": "string",
            "description": "Lastname of the passholder. **Attention**: this field is not always available.",
            "readOnly": true
          },
          "currentVisitAdmission": {
            "type": "string",
            "enum": [
              "ALLOWED",
              "NOT_ALLOWED",
              "NOT_ALLOWED_MAXIMUM_REACHED"
            ],
            "description": "Current visit admimission state of the passholder linked to this pass. Possible values<br>`ALLOWED`: The passholder is allowed to visit a museum.<br>`NOT_ALLOWED`: The passholder is not allowed to visit a museum. e.g. because his subscription is expired or he doesn't have a valid subscription.<br>`NOT_ALLOWED_MAXIMUM_REACHED`: The passholder is unregistered and has reached his maximum visits. (currently set to 2)",
            "readOnly": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "Date of birth of the passholder. **Attention**: this field is not always available.",
            "readOnly": true
          },
          "subscriptionEndDate": {
            "type": "string",
            "format": "date",
            "description": "End date of the museumpass subscription.",
            "readOnly": true
          }
        },
        "required": [
          "passholderId",
          "currentVisitAdmission",
          "subscriptionEndDate"
        ]
      }
    },
    "securitySchemes": {
      "CLIENT_ACCESS_TOKEN": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {}
          }
        },
        "description": "A client access token, obtained by exchanging your client id and client secret for a token via an HTTP request to publiq's authorization server. See the [authentication docs about client access tokens](https://publiq.stoplight.io/docs/authentication/docs/client-access-token.md) for more info."
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized. Your request is missing the required credentials to authenticate. See the Authentication documentation for more info.\n\n* type: https://api.publiq.be/probs/auth/unauthorized\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Example": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/unauthorized",
                  "title": "Unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. Your request was successfully authenticated but you do not have permission to perform this particular request.\n\n* type: https://api.publiq.be/probs/auth/forbidden\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Example": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/forbidden",
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "user must be admin of organizer abcd1234"
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/voucher-lists": {
      "post": {
        "summary": "Generate a list of vouchers",
        "operationId": "post-voucher-lists",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherList"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "a6c002ca-41ee-4e02-9558-1bead1b54ebc",
                      "vouchers": [
                        "5454482138103",
                        "5428704143561",
                        "5458143034508"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/body/invalid-data (if numberOfVouchers is not within its boundaries)\n\nThe detail property might include more information for the client developer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "description": "Generate a list of vouchers for a given partner.\n \n<!-- theme: warning -->\n\n> **Warning**: This API generates vouchers and marks them as sold in the museumPASSmusees system. This will be invoiced to the partner.\n\nThe caller of this request must have the _Voucher generator_ role for a specific partner.",
        "security": [
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "partnerId": {
                    "type": "string",
                    "description": "The partner that will be invoiced for the generated vouchers."
                  },
                  "numberOfVouchers": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 20,
                    "description": "The total number of vouchers to generate"
                  }
                },
                "required": [
                  "partnerId",
                  "numberOfVouchers"
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "partnerId": "72d95b03-359c-4b89-ba09-73ca2792ecab",
                    "numberOfVouchers": 1
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Vouchers"
        ]
      },
      "parameters": []
    },
    "/passes/{cardNumber}": {
      "get": {
        "summary": "Retrieve pass",
        "tags": [
          "Passholders"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pass"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\nhttps://api.publiq.be/probs/museumpass/card-not-active\nhttps://api.publiq.be/probs/museumpass/passholder-not-active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found. Possbile error types:\n\nhttps://api.publiq.be/probs/museumpass/pass-not-found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get-passes",
        "description": "Retrieve information related to a museum pass.\n\nThe caller of this request must have the _Museum Visit_ role.",
        "security": [
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "cardNumber",
          "in": "path",
          "required": true,
          "description": "The card number of the museum pass."
        }
      ]
    },
    "/passholders/{passholderId}/picture": {
      "get": {
        "summary": "Retrieve passholder picture",
        "tags": [
          "Passholders"
        ],
        "responses": {
          "200": {
            "description": "OK\n\nThe bytes of the image in PNG or JPG format.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found. Possbile error types:\n\nhttps://api.publiq.be/probs/museumpass/passholder-not-found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get-passholders-passholderId-picture",
        "description": "Retrieve the picture of a passholder.\n\nThe caller of this request must have the _Museum Visit_ role.",
        "security": [
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "passholderId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/visits": {
      "post": {
        "summary": "Register a museum visit",
        "operationId": "post-visits",
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\nhttps://api.publiq.be/probs/museumpass/passholder-not-found\nhttps://api.publiq.be/probs/museumpass/visit-maximum-reached\nhttps://api.publiq.be/probs/museumpass/museum-not-active\nhttps://api.publiq.be/probs/museumpass/card-not-active\nhttps://api.publiq.be/probs/museumpass/subscription-not-active\nhttps://api.publiq.be/probs/museumpass/passholder-not-active\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "description": "Registers a visit of a passholder at a given museum.\n\nThe caller of this request must have the _Museum Visit_ role for the given museum.",
        "security": [
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passholderId": {
                    "type": "string",
                    "description": "ID of the passholder that visits the museum"
                  },
                  "museumId": {
                    "type": "string"
                  }
                },
                "required": [
                  "passholderId",
                  "museumId"
                ]
              }
            }
          }
        },
        "tags": [
          "Passholders"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Passholders"
    },
    {
      "name": "Vouchers"
    }
  ]
}