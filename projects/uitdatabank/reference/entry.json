{
  "openapi": "3.1.0",
  "info": {
    "title": "Entry API",
    "version": "3.0",
    "description": "With UiTdatabank's Entry API you can create new events, places and organizers, and add extra info to them with specific requests to add/update properties. For example there are operations to add a label, remove a label, add an image, and so on.\n\n## Postman\n\n<!-- focus: false -->\n\n[![Download postman collection](https://postman.publiq.be/postman-download.svg)](https://postman.publiq.be/?api=udb-entry)\n\nDo you already have a **client id** and **client secret**?\nDownload a personalized Postman collection to start making requests in seconds!",
    "contact": {
      "name": "publiq helpdesk",
      "email": "vragen@publiq.be",
      "url": "https://docs.publiq.be"
    }
  },
  "servers": [
    {
      "url": "https://io-test.uitdatabank.be",
      "description": "Testing"
    },
    {
      "url": "https://io.uitdatabank.be",
      "description": "Production"
    }
  ],
  "paths": {
    "/events": {
      "post": {
        "summary": "event - create",
        "tags": [
          "Events"
        ],
        "responses": {
          "201": {
            "description": "The event was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "description": "UUID of the created event to use in subsequent requests or to store as a reference in your application."
                    },
                    "eventId": {
                      "type": "string",
                      "format": "uuid",
                      "deprecated": true,
                      "description": "Deprecated, use `id` instead."
                    },
                    "url": {
                      "type": "string",
                      "example": "https://io-test.uitdatabank.be/places/c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uri",
                      "description": "URL of the created event to use in subsequent requests or to store as a reference in your application."
                    },
                    "commandId": {
                      "type": "string",
                      "example": "92973349-967e-44d7-83a2-e1972d9e1622",
                      "format": "uuid",
                      "deprecated": true,
                      "description": "ID of the last internal command that was dispatched for this operation. Will be removed in the future."
                    }
                  },
                  "required": [
                    "id",
                    "eventId",
                    "url"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (name) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "event-post",
        "description": "Creates a new event.\n\n<!-- theme: warning -->\n\n> This request is also supported with an older, deprecated schema that was used to create an event with just its required fields.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "description": "The complete details of the new event to create.",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "../models/event.json"
                  },
                  {
                    "$ref": "../models/event-post-deprecated.json"
                  }
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam",
                      "fr": "Nom français",
                      "de": "Deutscher Name",
                      "en": "English name"
                    },
                    "calendarType": "single",
                    "startDate": "2021-05-17T22:00:00+00:00",
                    "endDate": "2021-05-17T22:00:00+00:00",
                    "subEvent": [
                      {
                        "id": 0,
                        "startDate": "2021-05-17T22:00:00+00:00",
                        "endDate": "2021-05-17T22:00:00+00:00"
                      }
                    ],
                    "availableFrom": "2021-05-17T22:00:00+00:00",
                    "location": {
                      "@id": "https://io-test.uitdatabank.be/places/85b04295-479c-40f5-b3dd-469dfb4387b3"
                    },
                    "organizer": {
                      "@id": "https://io-test.uitdatabank.be/organizers/c76db023-ef6d-49d9-8d15-5ddc3e6eb0a9"
                    },
                    "terms": [
                      {
                        "id": "0.50.4.0.0",
                        "label": "Concert",
                        "domain": "eventtype"
                      }
                    ],
                    "audience": {
                      "audienceType": "everyone"
                    },
                    "typicalAgeRange": "6-12",
                    "description": {
                      "nl": "Nederlandse beschrijving",
                      "fr": "Description français",
                      "de": "Deutscher Beschreibung",
                      "en": "English description"
                    },
                    "priceInfo": [
                      {
                        "category": "base",
                        "price": 10.5,
                        "priceCurrency": "EUR",
                        "name": {
                          "nl": "Basistarief",
                          "fr": "Tarif de base",
                          "en": "Base tariff",
                          "de": "Basisrate"
                        }
                      }
                    ],
                    "contactPoint": {
                      "phone": [
                        "016/112233"
                      ],
                      "email": [
                        "info@example.com"
                      ],
                      "url": [
                        "https://www.example.com"
                      ]
                    },
                    "bookingInfo": {
                      "phone": "016/112233",
                      "email": "info@example.com",
                      "url": "https://www.example.com",
                      "urlLabel": {
                        "nl": "Nederlandse beschrijving",
                        "fr": "Description français",
                        "de": "Deutscher Beschreibung",
                        "en": "English description"
                      },
                      "availabilityStarts": "2021-05-17T22:00:00+00:00",
                      "availabilityEnds": "2021-05-17T22:00:00+00:00"
                    },
                    "mediaObject": [
                      {
                        "@id": "https://io-test.uitdatabank.be/images/74969172-E2A6-4626-BA63-4B6919242A24"
                      },
                      {
                        "@id": "https://io-test.uitdatabank.be/images/85b04295-479c-40f5-b3dd-469dfb4387b3",
                        "description": "optional overwritten description",
                        "copyrightHolder": "optional overwritten copyright holder",
                        "inLanguage": "nl"
                      }
                    ],
                    "videos": [
                      {
                        "id": "b504cf44-9ab8-4641-9934-38d1cc67242c",
                        "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                        "embedUrl": "https://www.youtube.com/embed/cEItmb_a20D",
                        "language": "nl",
                        "copyrightHolder": "publiq"
                      }
                    ],
                    "labels": [
                      "label1"
                    ],
                    "hiddenLabels": [
                      "label2"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "get": {
        "summary": "event - get",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Event details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/event-with-read-example.json"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-get",
        "description": "Returns the details of the event for the given `eventId`."
      },
      "put": {
        "summary": "event - update",
        "operationId": "event-put",
        "responses": {
          "200": {
            "description": "The event was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uuid",
                      "description": "UUID of the updated event to use in subsequent requests or to store as a reference in your application."
                    },
                    "eventId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "description": "Deprecated, use `id` instead.",
                      "deprecated": true
                    },
                    "url": {
                      "type": "string",
                      "example": "https://io-test.uitdatabank.be/events/c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "description": "URL of the updated event to use in subsequent requests or to store as a reference in your application.",
                      "format": "uri"
                    },
                    "commandId": {
                      "type": "string",
                      "example": "92973349-967e-44d7-83a2-e1972d9e1622",
                      "format": "uuid",
                      "deprecated": true,
                      "description": "ID of the last internal command that was dispatched for this operation. Will be removed in the future."
                    }
                  },
                  "required": [
                    "id",
                    "eventId",
                    "url"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "eventId": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "url": "https://io-test.uitdatabank.be/events/c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "commandId": "92973349-967e-44d7-83a2-e1972d9e1622"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (name) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Updates the event with the given `eventId` by completely overwriting it with the properties in the given JSON. \n\n<!-- theme: danger -->\n\n> Any existing and optional properties on the event that are not included in the update request will be removed from the event.\n\n<!-- theme: info -->\n\n> Certain existing `labels` or `hiddenLabels` may be kept on the event even if they are not included in the update request. For example if they were added via the UiTdatabank UI, or if the client or user making the request does not have sufficient permission to remove specific labels.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam",
                      "fr": "Nom français",
                      "de": "Deutscher Name",
                      "en": "English name"
                    },
                    "status": {
                      "type": "Available",
                      "reason": {
                        "nl": "Nederlandse reden",
                        "fr": "Raison français",
                        "de": "Deutscher Grund",
                        "en": "English reason"
                      }
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    },
                    "calendarType": "single",
                    "startDate": "2021-05-17T22:00:00+00:00",
                    "endDate": "2021-05-17T22:00:00+00:00",
                    "subEvent": [
                      {
                        "id": 0,
                        "startDate": "2021-05-17T22:00:00+00:00",
                        "endDate": "2021-05-17T22:00:00+00:00",
                        "status": {
                          "type": "Available",
                          "reason": {
                            "nl": "Nederlandse reden",
                            "fr": "Raison français",
                            "de": "Deutscher Grund",
                            "en": "English reason"
                          }
                        },
                        "bookingAvailability": {
                          "type": "Available"
                        }
                      }
                    ],
                    "availableFrom": "2021-05-17T22:00:00+00:00",
                    "location": {
                      "@id": "https://io-test.uitdatabank.be/places/85b04295-479c-40f5-b3dd-469dfb4387b3"
                    },
                    "organizer": {
                      "@id": "https://io-test.uitdatabank.be/organizers/c76db023-ef6d-49d9-8d15-5ddc3e6eb0a9"
                    },
                    "terms": [
                      {
                        "id": "0.50.4.0.0",
                        "label": "Concert",
                        "domain": "eventtype"
                      }
                    ],
                    "audience": {
                      "audienceType": "everyone"
                    },
                    "typicalAgeRange": "6-12",
                    "description": {
                      "nl": "Nederlandse beschrijving",
                      "fr": "Description français",
                      "de": "Deutscher Beschreibung",
                      "en": "English description"
                    },
                    "priceInfo": [
                      {
                        "category": "base",
                        "price": 10.5,
                        "priceCurrency": "EUR",
                        "name": {
                          "nl": "Basistarief",
                          "fr": "Tarif de base",
                          "en": "Base tariff",
                          "de": "Basisrate"
                        }
                      }
                    ],
                    "contactPoint": {
                      "phone": [
                        "016/112233"
                      ],
                      "email": [
                        "info@example.com"
                      ],
                      "url": [
                        "https://www.example.com"
                      ]
                    },
                    "bookingInfo": {
                      "phone": "016/112233",
                      "email": "info@example.com",
                      "url": "https://www.example.com",
                      "urlLabel": {
                        "nl": "Nederlandse beschrijving",
                        "fr": "Description français",
                        "de": "Deutscher Beschreibung",
                        "en": "English description"
                      },
                      "availabilityStarts": "2021-05-17T22:00:00+00:00",
                      "availabilityEnds": "2021-05-17T22:00:00+00:00"
                    },
                    "mediaObject": [
                      {
                        "@id": "https://io-test.uitdatabank.be/images/74969172-E2A6-4626-BA63-4B6919242A24"
                      },
                      {
                        "@id": "https://io-test.uitdatabank.be/images/85b04295-479c-40f5-b3dd-469dfb4387b3",
                        "description": "optional overwritten description",
                        "copyrightHolder": "optional overwritten copyright holder",
                        "inLanguage": "nl"
                      }
                    ],
                    "videos": [
                      {
                        "id": "b504cf44-9ab8-4641-9934-38d1cc67242c",
                        "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                        "embedUrl": "https://www.youtube.com/embed/cEItmb_a20D",
                        "language": "nl",
                        "copyrightHolder": "publiq"
                      }
                    ],
                    "labels": [
                      "label1"
                    ],
                    "hiddenLabels": [
                      "label2"
                    ]
                  }
                }
              }
            }
          },
          "description": "The complete details of the event to update."
        },
        "tags": [
          "Events"
        ]
      },
      "delete": {
        "summary": "event - delete",
        "operationId": "event-delete",
        "responses": {
          "204": {
            "description": "No Content. The event's `workflowStatus` was successfully updated to `DELETED`."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Does a soft-delete of the event. The event will continue to exist but it's `workflowStatus` will be changed to `DELETED`. This will remove it from all publication channels.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{eventId}/copies": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "post": {
        "summary": "event - copy",
        "tags": [
          "Events"
        ],
        "responses": {
          "201": {
            "description": "The event was copied successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventId": {
                      "type": "string",
                      "description": "UUID of the new event to use in subsequent requests or to store as a reference in your application."
                    },
                    "url": {
                      "type": "string",
                      "description": "URL of the new event to use in subsequent requests or to store as a reference in your application."
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "eventId": "83a12220-9459-4fc8-b1ed-71b3d1668e65",
                      "url": "https://io-test.uitdatabank.be/events/83a12220-9459-4fc8-b1ed-71b3d1668e65"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (subEvent) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-copies-post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "../models/event-calendar-put.json"
                  },
                  {
                    "$ref": "../models/event-calendar-put-deprecated.json"
                  }
                ]
              },
              "examples": {
                "single": {
                  "value": {
                    "calendarType": "single",
                    "subEvent": [
                      {
                        "startDate": "2021-05-17T22:00:00+00:00",
                        "endDate": "2021-05-17T22:00:00+00:00",
                        "status": {
                          "type": "Available"
                        },
                        "bookingAvailability": {
                          "type": "Available"
                        }
                      }
                    ]
                  }
                },
                "multiple": {
                  "value": {
                    "calendarType": "multiple",
                    "subEvent": [
                      {
                        "startDate": "2020-05-17T22:00:00+00:00",
                        "endDate": "2020-05-17T22:00:00+00:00",
                        "status": {
                          "type": "Unavailable",
                          "reason": {
                            "nl": "Geannuleerd wegens COVID-19",
                            "en": "Cancelled due to COVID-19"
                          }
                        },
                        "bookingAvailability": {
                          "type": "Unavailable"
                        }
                      },
                      {
                        "startDate": "2021-05-17T22:00:00+00:00",
                        "endDate": "2021-05-17T22:00:00+00:00",
                        "status": {
                          "type": "Available"
                        },
                        "bookingAvailability": {
                          "type": "Available"
                        }
                      }
                    ]
                  }
                },
                "periodic": {
                  "value": {
                    "calendarType": "periodic",
                    "startDate": "2021-05-17T22:00:00+00:00",
                    "endDate": "2021-05-17T22:00:00+00:00",
                    "openingHours": [
                      {
                        "opens": "13:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      },
                      {
                        "opens": "09:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday",
                          "sunday"
                        ]
                      }
                    ],
                    "status": {
                      "type": "Available"
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    }
                  }
                },
                "permanent": {
                  "value": {
                    "calendarType": "permanent",
                    "openingHours": [
                      {
                        "opens": "13:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      },
                      {
                        "opens": "09:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday",
                          "sunday"
                        ]
                      }
                    ],
                    "status": {
                      "type": "Available"
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    }
                  }
                }
              }
            }
          },
          "description": "New calendar information for the event copy."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "description": "Creates a new event based on all the properties of an existing event with the given `eventId`. Only the calendar information will be completely replaced with a new one, which has to be included in the request body.\n\nThe schema of the request body is the same as the one for the [`PUT /events/{eventId}/calendar`](/reference/entry.json/paths/~1events~1{eventId}~1calendar/put) endpoint.",
        "x-internal": true
      }
    },
    "/events/{eventId}/attendance-mode": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "attendanceMode - update",
        "tags": [
          "Events"
        ],
        "responses": {
          "204": {
            "description": "No Content. The event's attendance mode was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (attendanceMode) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-attendance-mode-put",
        "description": "Updates the attendance mode of an event. There are three different attendance modes:\n- `offline`: the event takes places on a physical location\n- `online`: the events takes places on an online location\n- `mixed`: the event takes places both on a real location and a online location\n\nWhen changing from attendance mode online to either offline or mixed it is required to include the location property with the URI or UUID of the (physical) [location](/models/place.json) that the event is taking place at.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-attendanceMode-put.json"
              },
              "examples": {
                "Example Online": {
                  "value": {
                    "attendanceMode": "online"
                  }
                },
                "Example offline": {
                  "value": {
                    "attendanceMode": "offline",
                    "location": "https://io-test.uitdatabank.be/place/85b04295-479c-40f5-b3dd-469dfb4387b3"
                  }
                }
              }
            }
          },
          "description": "New attendanceMode to set on the event, and optionally a new location (when moving from attendanceMode `online` to `mixed` or `offline`)."
        }
      }
    },
    "/events/{eventId}/audience": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "audience - update",
        "operationId": "event-audience-put",
        "responses": {
          "204": {
            "description": "No Content. The event's audience was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data\n* https://api.publiq.be/probs/uitdatabank/incompatible-audience-type",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/audienceType",
                          "error": "The data (int) should match the type: string"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Updates the intended audience of the event, which currently only has one property `audienceType`. \n\nBy default the audienceType is set to `everyone`. If needed the audience can be updated to `members` to hide it on public channels, or `education` for CultuurKuur events for schools.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-audience.json"
              },
              "examples": {
                "Everyone (default)": {
                  "value": {
                    "audienceType": "everyone"
                  }
                },
                "Members": {
                  "value": {
                    "audienceType": "members"
                  }
                },
                "Education (CultuurKuur)": {
                  "value": {
                    "audienceType": "education"
                  }
                }
              }
            }
          },
          "description": "New audienceType to set on the event."
        }
      }
    },
    "/events/{eventId}/available-from": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "availableFrom - update",
        "operationId": "event-availableFrom-put",
        "responses": {
          "204": {
            "description": "No Content. The event's availableFrom was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/availableFrom",
                          "error": "The data (int) should match the type: date-time"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Updates the availableFrom of the event. This is the first date & time that the event is allowed to be visible on publication channels.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-availableFrom-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "availableFrom": "2021-05-17T22:00:00+00:00"
                  }
                }
              }
            }
          },
          "description": "New availableFrom to set on the event."
        }
      }
    },
    "/events/{eventId}/booking-availability": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "bookingAvailability - update",
        "operationId": "event-bookingAvailability-put",
        "responses": {
          "204": {
            "description": "No Content. The bookingAvailability has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data\n* https://api.publiq.be/probs/uitdatabank/calendar-type-not-supported",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitdatabank/calendar-type-not-supported",
                      "title": "Calendar type not supported",
                      "status": 400,
                      "detail": "Not allowed to update booking availability on calendar type: \"permanent\". Only single and multiple calendar types can be updated."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Updates the general bookingAvailability info on the top level of the event with the given `eventId`.\n\nThe bookingAvailability of any subEvents that the event has will also be updated to match the general bookingAvailability.\n\n<!-- theme: warning -->\n\n> Note that you cannot update the bookingAvailability of an event with [calendar type](/models/event-calendarType.json) `periodic` or `permanent`. For now, they can only have \"Available\" as bookingAvailability.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-bookingAvailability.json"
              },
              "examples": {
                "Tickets/places available": {
                  "value": {
                    "type": "Available"
                  }
                },
                "No more tickets/places available": {
                  "value": {
                    "type": "Unavailable"
                  }
                }
              }
            }
          },
          "description": "New bookingAvailability to set on the event."
        },
        "tags": [
          "Events"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/events/{eventId}/calendar": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "calendar - put",
        "tags": [
          "Events"
        ],
        "responses": {
          "204": {
            "description": "No Content. The calendar information has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (subEvent) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-calendar-put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "../models/event-calendar-put.json"
                  },
                  {
                    "$ref": "../models/event-calendar-put-deprecated.json"
                  }
                ]
              },
              "examples": {
                "single": {
                  "value": {
                    "calendarType": "single",
                    "subEvent": [
                      {
                        "startDate": "2021-05-17T22:00:00+00:00",
                        "endDate": "2021-05-17T22:00:00+00:00",
                        "status": {
                          "type": "Available"
                        },
                        "bookingAvailability": {
                          "type": "Available"
                        }
                      }
                    ]
                  }
                },
                "multiple": {
                  "value": {
                    "calendarType": "multiple",
                    "subEvent": [
                      {
                        "startDate": "2020-05-17T22:00:00+00:00",
                        "endDate": "2020-05-17T22:00:00+00:00",
                        "status": {
                          "type": "Unavailable",
                          "reason": {
                            "nl": "Geannuleerd wegens COVID-19",
                            "en": "Cancelled due to COVID-19"
                          }
                        },
                        "bookingAvailability": {
                          "type": "Unavailable"
                        }
                      },
                      {
                        "startDate": "2021-05-17T22:00:00+00:00",
                        "endDate": "2021-05-17T22:00:00+00:00",
                        "status": {
                          "type": "Available"
                        },
                        "bookingAvailability": {
                          "type": "Available"
                        }
                      }
                    ]
                  }
                },
                "periodic": {
                  "value": {
                    "calendarType": "periodic",
                    "startDate": "2021-05-17T22:00:00+00:00",
                    "endDate": "2021-05-17T22:00:00+00:00",
                    "openingHours": [
                      {
                        "opens": "13:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      },
                      {
                        "opens": "09:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday",
                          "sunday"
                        ]
                      }
                    ],
                    "status": {
                      "type": "Available"
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    }
                  }
                },
                "permanent": {
                  "value": {
                    "calendarType": "permanent",
                    "openingHours": [
                      {
                        "opens": "13:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      },
                      {
                        "opens": "09:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday",
                          "sunday"
                        ]
                      }
                    ],
                    "status": {
                      "type": "Available"
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    }
                  }
                }
              }
            }
          },
          "description": "New calendar information."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "description": "Updates the calendar information of the given `eventId`. The calendar information will be completely replaced with the new one.\n\nThe required properties depend on the `calendarType` property.\n\n| calendarType  | required  | optional  |\n|---|---|---|\n| single  | subEvent\\[0\\].startDate, subEvent\\[0\\].endDate | subEvent\\[0\\].status, subEvent\\[0\\].bookingAvailability  |\n| multiple  | subEvent\\[\\*\\].startDate, subEvent[\\*\\].endDate  | subEvent\\[\\*\\].status, subEvent\\[\\*\\].bookingAvailability  |\n| periodic  | startDate, endDate  | openingHours, status, bookingAvailability  |\n| permanent  |   | openingHours, status, bookingAvailability  |\n\n<!-- theme: warning -->\n\n> If `status` or `bookingAvailability` is missing on the event or a subEvent, it will default to `Available`.\n>\n> Although the status and bookingAvailability are optional they have a default value of `Available`. When the status and bookingAvailability is not provided an already set value will be overwritten to `Available`!\n\n<!-- theme: success -->\n\n> You can use `single` and `multiple` interchangeably as long as you also include `subEvent` as well. The API will use the correct type based on the number of subEvents inside `subEvent`.\n\n<!-- theme: info -->\n\n> This endpoint also supports a deprecated schema that uses `timeSpans` instead of `subEvent`. The `timeSpans` also have a slightly different structure than `subEvent`. For new integrations, it is recommended to use the schema with the `subEvent` property. \n> \n> For existing integrations the `timeSpans` property will be supported indefinitely for backward compatibility."
      }
    },
    "/events/{eventId}/calendar-summary": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "get": {
        "summary": "calendar summary - get",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "The calendar summary in either plain text or HTML.\n\nFor example:\n```\nVan 6 januari 2021 tot 23 juni 2021 (geannuleerd)\n```\n\nOr:\n```\n<span class=\\\"cf-from cf-meta\\\">Van</span> <span class=\\\"cf-date\\\">6 januari 2021</span> <span class=\\\"cf-to cf-meta\\\">tot</span> <span class=\\\"cf-date\\\">23 juni 2021</span> <span title=\\\"Deze activiteit is waarschijnlijk geannuleerd omwille van preventieve coronamaatregelen.\\\" class=\\\"cf-status\\\">(geannuleerd)</span>\n```"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-calendar-summary-get",
        "description": "Returns a human-readable summary of the calendar information of the event. Can be configured to return either plain text or HTML, and to switch between four different formats depending on the amount of space you have to display it.\n\n> For backward compatibility this endpoint is also accessible at the old abbreviated `/events/{eventId}/calsum` path.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "text",
                "html"
              ],
              "default": "text"
            },
            "in": "query",
            "name": "style",
            "description": "Deprecated alternative to the `accept` header. Supported for backward compatibility.",
            "deprecated": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "xs",
                "sm",
                "md",
                "lg"
              ],
              "default": "lg"
            },
            "in": "query",
            "name": "size",
            "description": "Defines the size of the summary. Larger summaries contain more detail for events with multiple dates/hours but will also take up more space when shown in a UI. We recommend to use the format `md` for the search results (and `lg` for events with calendarType single), and to always use `lg` for the detailpage. In some cases (e.g. mobile apps) calendar summary `xs` can be useful."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "nl",
                "fr",
                "en",
                "de"
              ],
              "default": "nl"
            },
            "in": "query",
            "name": "language",
            "description": "Defines the language that the summary will be written in. Also influences the date/time format used."
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "in": "query",
            "name": "hidePast",
            "description": "Will hide past dates in summaries of events with multiple dates. By default, past dates are not excluded from the calendar summary."
          },
          {
            "schema": {
              "type": "string",
              "default": "Europe/Brussels"
            },
            "in": "query",
            "name": "timezone",
            "description": "The timezone to format date/times in."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "text/plain",
                "text/html"
              ]
            },
            "in": "header",
            "name": "accept",
            "description": "Indicates the expected content-type. Defaults to `text/plain` but can be set to `text/html` for a HTML response."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "nl_BE",
                "fr_BE",
                "en_BE",
                "de_BE"
              ]
            },
            "in": "query",
            "name": "langCode",
            "description": "Deprecated alternative to the `language` query parameter. Supported for backward compatibility.",
            "deprecated": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "xs",
                "sm",
                "md",
                "lg"
              ]
            },
            "in": "query",
            "name": "format",
            "description": "Deprecated alternative to the `size` query parameter. Supported for backward compatibility.",
            "deprecated": true
          }
        ],
        "x-internal": false
      }
    },
    "/events/{eventId}/facilities": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "facilities - update",
        "operationId": "event-facilities-put",
        "responses": {
          "204": {
            "description": "No Content. The facilities have been successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Updates the list of available (accessibility) facilities on the event. These will show up in the [event's `terms`](/models/event-terms.json).\n\nA list of possible facilities can be found using our [Terms guide](/docs/terms.md).\n\n**Note**: A special permission is required to update an event's facilities in UiTdatabank, even if you are the event owner. Contact an administrator for further information.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-facilities-put.json"
              },
              "examples": {
                "Example": {
                  "value": [
                    "3.13.2.0.0",
                    "3.23.2.0.0"
                  ]
                }
              }
            }
          },
          "description": "New list of facilities to set on the event. Facilities previously set on the event but not included in this list will be removed from the event. Other terms will be preserved."
        }
      }
    },
    "/events/{eventId}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "get": {
        "summary": "history - get",
        "operationId": "event-history-get",
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Event history.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string",
                        "description": "A human-readable description of the update to the event. (Always in Dutch.)"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-08-26T16:54:38+00:00",
                        "description": "The date and time that the update happened in an ISO-8601 format with a timezone offset. For example `2021-08-26T16:54:38+00:00`."
                      },
                      "author": {
                        "type": "string",
                        "description": "Identifier of the user who made the change. Should not be treated as a semantic user id though, because it can be an email, v1 user id, or v2 user id. Should only be displayed and used by admins that look at the history log to look up the user in the correct system."
                      },
                      "api": {
                        "type": "string",
                        "description": "Human-readable name of the API that was used to make the change. Not always present in older history logs."
                      },
                      "auth0ClientId": {
                        "type": "string",
                        "description": "The id of the Auth0 client that made the change. (If it was an Auth0 API client.)"
                      },
                      "auth0ClientName": {
                        "type": "string",
                        "description": "Name of the client in Auth0 that made the change. (If it was an Auth0 API client.)"
                      },
                      "apiKey": {
                        "type": "string",
                        "description": "API key of the UiTID v1 consumer that made the change (if it was an UiTID v1 consumer)."
                      },
                      "consumerName": {
                        "type": "string",
                        "description": "Name of the UiTID v1 consumer that made the change (if it was an UiTID v1 consumer)."
                      }
                    },
                    "required": [
                      "description",
                      "date"
                    ]
                  }
                },
                "examples": {
                  "Auth0 client": {
                    "value": [
                      {
                        "date": "2021-09-30T14:57:17+00:00",
                        "description": "Kalender-info aangepast",
                        "author": "google-oauth2|108326107941342286958",
                        "auth0ClientId": "JGJ3rAJLurRM9DHDE072zVhF3azl57mo",
                        "auth0ClientName": "UiTdatabase JWT Provider",
                        "api": "JSON-LD API"
                      }
                    ]
                  },
                  "UiTID v1 consumer": {
                    "value": [
                      {
                        "date": "2021-10-04T09:40:59+00:00",
                        "description": "Reservatie-info aangepast",
                        "author": "google-oauth2|108326107941342286958",
                        "apiKey": "deb306a6-6f46-4c98-89ce-b03ec4fd11e2",
                        "api": "JSON-LD API",
                        "consumerName": "UiTdatabank Acceptatie"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Returns the history log of the event for the given `eventId`.\n\nThe history log is an array of objects that contain info about each individual update to the event, who did the update, using what API, etc.\n\nBecause this history log can contain API keys which are secret (deprecated but still usable for backward compatibility), it can only be accessed by users that are a \"god user\".\n\nBecause of this limitation, the endpoint is also documented as internal and not visible in the public docs.",
        "x-internal": true,
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/events/{eventId}/location/{placeId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        },
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "put": {
        "summary": "location - update",
        "operationId": "event-location-put",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/uitdatabank/attendance-mode-not-supported",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Attendance mode not supported": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitdatabank/attendance-mode-not-supported",
                      "title": "Attendance mode not supported",
                      "status": 400,
                      "detail": "Cannot update the location of an online event to a real location. Set the attendanceMode to mixed or offline first."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Updates the event's location to a new place based on the given `eventId` and `placeId` in the URL.\n\nIf the `eventId` does not exist a `404 Not Found` response will be returned. If the `placeId` does not exist a `400 Bad Request` response will be returned. Otherwise a `204 No Content` will be returned if successful. (See response examples below.)",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{eventId}/major-info": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "major-info - update",
        "operationId": "event-major-info-put",
        "description": "<!-- theme: danger -->\n\n> The major-info endpoint is deprecated and should not be used in new integrations!\n\nUpdates the \"major info\" of the event with the given `eventId`.\n\nThe major info contains:\n\n* `name`: The name of the event in the event's `mainLanguage`, as a string\n* `type`: Id of the event's `eventtype` taxonomy `term`, as a string\n* `theme` (optional): Id of the event's `theme` taxonomy `term`, as a string\n* `location`: Object with the id of the event's location, as a place's uuid (string)\n* `calendar`: Object with the event's calendar information (see schema below)\n\nAll properties are required (except for `theme`) and will overwrite existing values of these properties on the event. If the event has a `theme` `term` before this update, but there is no `theme` in this major-info update, the `theme` will be removed.\n\n<!-- theme: success -->\n> For backward-compatibility with older integrations, this operation can also be requested via `POST /event/{eventId}/major-info`.",
        "deprecated": true,
        "tags": [
          "Events"
        ],
        "responses": {
          "204": {
            "description": "No Content. The major-info has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A human-readable name in the main language of the event."
                  },
                  "type": {
                    "type": "string",
                    "description": "The `eventtype` term used to categorize the event. Terms are pre-defined and can be browsed in our [Terms](../docs/terms.md) guide."
                  },
                  "theme": {
                    "type": "string",
                    "description": "The `theme` term used to categorize the event. Terms are pre-defined and can be browsed in our [Terms](../docs/terms.md) guide."
                  },
                  "location": {
                    "type": "object",
                    "description": "Reference to the location that the event is taking place at.",
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "UUID of the location that the event is taking place at."
                      }
                    }
                  },
                  "calendar": {
                    "$ref": "../models/event-calendar-put-deprecated.json"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "location",
                  "calendar"
                ]
              },
              "examples": {
                "Single day": {
                  "value": {
                    "name": "Single day example",
                    "type": "0.50.4.0.0",
                    "theme": "1.8.3.3.0",
                    "location": {
                      "id": "DA5499B2-9C79-48D3-A02D-8F471308100D"
                    },
                    "calendar": {
                      "calendarType": "single",
                      "timeSpans": [
                        {
                          "start": "2021-05-17T22:00:00+00:00",
                          "end": "2021-05-17T22:00:00+00:00",
                          "status": {
                            "type": "Available"
                          },
                          "bookingAvailability": {
                            "type": "Available"
                          }
                        }
                      ]
                    }
                  }
                },
                "Multiple days": {
                  "value": {
                    "name": "Multiple days example",
                    "type": "0.50.4.0.0",
                    "theme": "1.8.3.3.0",
                    "location": {
                      "id": "DA5499B2-9C79-48D3-A02D-8F471308100D"
                    },
                    "calendar": {
                      "calendarType": "multiple",
                      "timeSpans": [
                        {
                          "start": "2021-05-17T22:00:00+00:00",
                          "end": "2021-05-17T22:00:00+00:00",
                          "status": {
                            "type": "Available"
                          },
                          "bookingAvailability": {
                            "type": "Available"
                          }
                        },
                        {
                          "start": "2021-05-18T22:00:00+00:00",
                          "end": "2021-05-18T22:00:00+00:00",
                          "status": {
                            "type": "Available"
                          },
                          "bookingAvailability": {
                            "type": "Available"
                          }
                        }
                      ]
                    }
                  }
                },
                "Periodic with opening hours": {
                  "value": {
                    "name": "Periodic with opening hours",
                    "type": "0.50.4.0.0",
                    "theme": "1.8.3.3.0",
                    "location": {
                      "id": "DA5499B2-9C79-48D3-A02D-8F471308100D"
                    },
                    "calendar": {
                      "calendarType": "periodic",
                      "startDate": "2021-05-17T22:00:00+00:00",
                      "endDate": "2021-05-17T22:00:00+00:00",
                      "openingHours": [
                        {
                          "opens": "13:00",
                          "closes": "17:00",
                          "dayOfWeek": [
                            "monday"
                          ]
                        },
                        {
                          "opens": "09:00",
                          "closes": "17:00",
                          "dayOfWeek": [
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday",
                            "saturday",
                            "sunday"
                          ]
                        }
                      ]
                    }
                  }
                },
                "Permanent with opening hours": {
                  "value": {
                    "name": "Periodic with opening hours",
                    "type": "0.50.4.0.0",
                    "theme": "1.8.3.3.0",
                    "location": {
                      "id": "DA5499B2-9C79-48D3-A02D-8F471308100D"
                    },
                    "calendar": {
                      "calendarType": "permanent",
                      "openingHours": [
                        {
                          "opens": "13:00",
                          "closes": "17:00",
                          "dayOfWeek": [
                            "monday"
                          ]
                        },
                        {
                          "opens": "09:00",
                          "closes": "17:00",
                          "dayOfWeek": [
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday",
                            "saturday",
                            "sunday"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "All required fields for an event (whether they have been updated or not)."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/events/{eventId}/name/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        },
        {
          "$ref": "#/components/parameters/language"
        }
      ],
      "put": {
        "summary": "name - update",
        "tags": [
          "Events"
        ],
        "responses": {
          "204": {
            "description": "No Content. The name was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-name-put",
        "description": "Updates the localized name of an event based on the given `eventId` and `language` inside the URL.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-name-put.json"
              },
              "examples": {}
            }
          },
          "description": "The new name of the event."
        }
      }
    },
    "/events/{eventId}/online-url": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "onlineUrl - update",
        "tags": [
          "Events"
        ],
        "responses": {
          "204": {
            "description": "No Content. The onlineUrl was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (onlineUrl) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-online-url-put",
        "description": "Updates the online url of an event. Only events with attendance mode `online` or `mixed` can have an online url.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-onlineUrl-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "onlineUrl": "https://www.publiq.be/livestream"
                  }
                }
              }
            }
          },
          "description": "New onlineUrl to set on the event."
        }
      },
      "delete": {
        "summary": "onlineUrl - delete",
        "operationId": "event-online-url-delete",
        "responses": {
          "204": {
            "description": "No Content. The onlineUrl was successfully deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Delete the onlineUrl of an event.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{eventId}/price-info": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "put": {
        "summary": "priceInfo - update",
        "tags": [
          "Events"
        ],
        "responses": {
          "204": {
            "description": "No Content. The priceInfo was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "error": "Tariff name \"Kinderen\" must be unique.",
                          "jsonPointer": "/priceInfo/1/name/nl"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "event-price-info-put",
        "description": "Updates the price info of an event.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-priceInfo.json"
              },
              "examples": {}
            }
          },
          "description": "New priceInfo to set on the event."
        }
      }
    },
    "/events/{eventId}/sub-events": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "patch": {
        "summary": "subEvent - patch",
        "operationId": "event-subEvent-patch",
        "description": "Updates the given subEvents on the event with the given `eventId`.\n\nAllows partial updates, omitted properties will be ignored and remain unchanged. Omitted subEvents will also remain unchanged.\n\nEvery subEvent to update requires an `id` property that is an integer that corresponds to their index in the list of subEvents on the parent event. For example `0` for the first subEvent, `1` for the second subEvent, and so on.\n\n<!-- theme: warning -->\n\n> Note! If you change the `startDate` of a subEvent, the subEvents will be re-ordered on the parent event afterwards because subEvents are always sorted chronologically.\n\nOnly events with calendar type `single` and `multiple` have subEvents, so only events with those calendar types support this endpoint.",
        "tags": [
          "Events"
        ],
        "responses": {
          "204": {
            "description": "No Content. The subEvents have been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data\n* https://api.publiq.be/probs/uitdatabank/calendar-type-not-supported",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitdatabank/calendar-type-not-supported",
                      "title": "Calendar type not supported",
                      "status": 400,
                      "detail": "Not allowed to update subEvents on calendar type: \"permanent\". Only subEvents on single and multiple calendar types can be updated."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-subEvent-patch.json"
              },
              "examples": {
                "Updating the dates of the first subEvent": {
                  "value": [
                    {
                      "id": 0,
                      "startDate": "2021-05-17T22:00:00+00:00",
                      "endDate": "2021-05-17T22:00:00+00:00"
                    }
                  ]
                },
                "Updating the status of the second subEvent": {
                  "value": [
                    {
                      "id": 1,
                      "status": {
                        "type": "Unavailable",
                        "reason": {
                          "nl": "Afgelast wegens corona"
                        }
                      }
                    }
                  ]
                },
                "Updating the booking availability of the third subEvent": {
                  "value": [
                    {
                      "id": 2,
                      "bookingAvailability": {
                        "type": "Unavailable"
                      }
                    }
                  ]
                },
                "Updating multiple": {
                  "value": [
                    {
                      "id": 0,
                      "startDate": "2021-05-17T22:00:00+00:00",
                      "endDate": "2021-05-17T22:00:00+00:00"
                    },
                    {
                      "id": 1,
                      "status": {
                        "type": "Unavailable",
                        "reason": {
                          "nl": "Afgelast wegens corona"
                        }
                      }
                    },
                    {
                      "id": 2,
                      "bookingAvailability": {
                        "type": "Unavailable"
                      }
                    }
                  ]
                }
              }
            }
          },
          "description": "The subEvents to update, with the properties to update. \n\nEach subEvent must have an `id` property to indicate which subEvent should be updated. This `id` is the position of the subEvent in the list of subEvents on the parent event. For example `0` for the first subEvent, `1` for the second subEvent, and so on.\n\nAll other properties are optional, and only properties that are included will be updated. No subEvents or properties will be removed."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/events/{eventId}/type/{termId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        },
        {
          "$ref": "#/components/parameters/termId"
        }
      ],
      "put": {
        "summary": "terms > eventtype - update",
        "operationId": "event-terms-eventtype-put",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Updates the event's type (examples of types are `Concert`, `Opendeurdag`, `Lessenreeks`, and so on) based on the given `eventId` and `termId`.\n\nTerms are pre-defined and can be found using our [Terms](/docs/terms.md) guide. Only terms from the `eventtype` domain can be used as event types.\n\nIf the `eventId` does not exist a `404 Not Found` will be returned. If the `termId` does not exist or is not a term in the `eventtype` domain, a `400 Bad Request` will be returned. If the request is successful a `204 No Content` will be returned.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/events/{eventId}/theme": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "delete": {
        "summary": "terms > theme - delete",
        "operationId": "event-terms-theme-delete",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Deletes the event's current theme based on the given `eventId`.\n\nIf the `eventId` does not exist a `404 Not Found` will be returned. If the request is successful a `204 No Content` will be returned.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/events/{eventId}/theme/{termId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        },
        {
          "$ref": "#/components/parameters/termId"
        }
      ],
      "put": {
        "summary": "terms > theme - update",
        "operationId": "event-terms-theme-put",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Events"
        ],
        "description": "Updates the event's theme (examples of themes are `Audiovisuele kunst`, `Moderne dans`, `Actie en avontuur`, and so on) based on the given `eventId` and `termId`.\n\nTerms are pre-defined and can be found using our [Terms](/docs/terms.md) guide. Only terms from the `theme` domain can be used as theme.\n\nIf the `eventId` does not exist a `404 Not Found` will be returned. If the `termId` does not exist or is not a term in the `theme` domain, a `400 Bad Request` will be returned. If the request is successful a `204 No Content` will be returned.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/events/{eventId}/videos": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        }
      ],
      "post": {
        "summary": "videos - add",
        "operationId": "event-videos-post",
        "responses": {
          "200": {
            "description": "The video was added to the event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "videoId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "b504cf44-9ab8-4641-9934-38d1cc67242c",
                      "description": "UUID used to identify the video on the event."
                    }
                  }
                },
                "examples": {
                  "The new videoId": {
                    "value": {
                      "videoId": "b504cf44-9ab8-4641-9934-38d1cc67242c"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/url",
                          "error": "The required properties url is missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-videos-post.json"
              },
              "examples": {
                "Video from Youtube and with Copyright": {
                  "value": {
                    "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                    "language": "nl",
                    "copyrightHolder": "publiq"
                  }
                },
                "Video from Vimeo": {
                  "value": {
                    "url": "https://www.vimeo.com/4dwe2",
                    "language": "nl"
                  }
                },
                "Video from Youtube with Url Shortener": {
                  "value": {
                    "url": "https://youtu.be/bsaAOun-dec",
                    "language": "nl",
                    "copyrightHolder": "publiq"
                  }
                }
              }
            }
          },
          "description": "The new video to add to an event."
        },
        "description": "Add a video as a URL reference to an event\n\nThe video objects contains:\n\n* `url`: The full URL of the video. Currently only *Vimeo* and *Youtube* are supported as video source locations.\n* `copyrightHolder`: The copyright holder of the video material. Although this field is optional it is strongly recommended to add a reference to the entity owning the rights on the video material.",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      },
      "patch": {
        "summary": "videos - patch",
        "operationId": "event-videos-patch",
        "responses": {
          "204": {
            "description": "No Content. The videos are updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/url",
                          "error": "The required properties url is missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Update one or more videos of an event.\n\nThe video object(s) must contain\n\n* `id`: The id of the video object to be changed.\n\nThe video object(s) can contain:\n\n* `url`: The full URL of the video. Currently only *Vimeo* and *Youtube* are supported as video source locations.\n* `language`: The updated language of a video\n* `copyrightHolder`: The copyright holder of the video material. Although this field is optional it is strongly recommended to add a reference to the entity owning the rights on the video material.",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/event-videos-patch.json"
              },
              "examples": {
                "Videos to be updated.": {
                  "value": [
                    {
                      "id": "46e9ea9f-fc42-4759-a81b-4308467b7c35",
                      "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                      "copyrightHolder": "publiq"
                    },
                    {
                      "id": "b504cf44-9ab8-4641-9934-38d1cc67242c",
                      "language": "fr"
                    }
                  ]
                }
              }
            }
          },
          "description": "An array of videos to be changed."
        }
      }
    },
    "/events/{eventId}/videos/{videoId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/eventId"
        },
        {
          "$ref": "#/components/parameters/videoId"
        }
      ],
      "delete": {
        "summary": "videos - delete",
        "operationId": "event-videos-delete",
        "responses": {
          "204": {
            "description": "No Content. The video was deleted from the event."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Delete an embedded video from an event based on the event id and the video id.",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/places": {
      "post": {
        "summary": "place - create",
        "tags": [
          "Places"
        ],
        "responses": {
          "201": {
            "description": "The place was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the created place.",
                      "example": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uuid"
                    },
                    "placeId": {
                      "type": "string",
                      "description": "The id of the created place (deprecated and replaced with `id`).",
                      "deprecated": true,
                      "example": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uuid"
                    },
                    "url": {
                      "type": "string",
                      "description": "The url of the JSON-LD representation of the created place.",
                      "example": "https://io-test.uitdatabank.be/places/c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uri"
                    },
                    "commandId": {
                      "type": "string",
                      "example": "92973349-967e-44d7-83a2-e1972d9e1622",
                      "format": "uuid",
                      "deprecated": true,
                      "description": "ID of the last internal command that was dispatched for this operation. Will be removed in the future."
                    }
                  },
                  "required": [
                    "id",
                    "placeId",
                    "url"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "placeId": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "url": "https://io-test.uitdatabank.be/places/c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (name) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "place-post",
        "description": "Creates a new place.\n\n<!-- theme: warning -->\n\n> This request is also supported with an older, deprecated schema that was used to create a place with just its required fields.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "description": "The complete details of the new place to create.",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "../models/place.json"
                  },
                  {
                    "$ref": "../models/place-post-deprecated.json"
                  }
                ]
              },
              "examples": {
                "Example": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam",
                      "fr": "Nom français",
                      "de": "Deutscher Name",
                      "en": "English name"
                    },
                    "address": {
                      "nl": {
                        "addressCountry": "BE",
                        "addressLocality": "Brussel",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      },
                      "fr": {
                        "addressCountry": "BE",
                        "addressLocality": "Bruxelles",
                        "postalCode": "1000",
                        "streetAddress": "Rue de la Loi 1"
                      },
                      "de": {
                        "addressCountry": "BE",
                        "addressLocality": "Brüssel",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      },
                      "en": {
                        "addressCountry": "BE",
                        "addressLocality": "Brussels",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      }
                    },
                    "calendarType": "periodic",
                    "startDate": "2021-05-17T22:00:00+00:00",
                    "endDate": "2021-05-17T22:00:00+00:00",
                    "openingHours": [
                      {
                        "opens": "17:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      }
                    ],
                    "availableFrom": "2021-05-17T22:00:00+00:00",
                    "terms": [
                      {
                        "id": "0.14.0.0.0",
                        "label": "Monument",
                        "domain": "eventtype"
                      }
                    ],
                    "typicalAgeRange": "6-12",
                    "description": {
                      "nl": "Nederlandse beschrijving",
                      "fr": "Description français",
                      "de": "Deutscher Beschreibung",
                      "en": "English description"
                    },
                    "priceInfo": [
                      {
                        "category": "base",
                        "price": 10.5,
                        "priceCurrency": "EUR",
                        "name": {
                          "nl": "Basistarief",
                          "fr": "Tarif de base",
                          "de": "Base tariff",
                          "en": "Basisrate"
                        }
                      }
                    ],
                    "contactPoint": {
                      "phone": [
                        "016/112233"
                      ],
                      "email": [
                        "info@example.com"
                      ],
                      "url": [
                        "https://www.example.com"
                      ]
                    },
                    "bookingInfo": {
                      "phone": "016/112233",
                      "email": "info@example.com",
                      "url": "https://www.example.com",
                      "urlLabel": {
                        "nl": "Nederlandse beschrijving",
                        "fr": "Description français",
                        "de": "Deutscher Beschreibung",
                        "en": "English description"
                      },
                      "availabilityStarts": "2021-05-17T22:00:00+00:00",
                      "availabilityEnds": "2021-05-17T22:00:00+00:00"
                    },
                    "mediaObject": [
                      {
                        "@id": "https://io-test.uitdatabank.be/images/74969172-E2A6-4626-BA63-4B6919242A24"
                      },
                      {
                        "@id": "https://io-test.uitdatabank.be/images/85b04295-479c-40f5-b3dd-469dfb4387b3",
                        "description": "optional overwritten description",
                        "copyrightHolder": "optional overwritten copyright holder",
                        "inLanguage": "nl"
                      }
                    ],
                    "videos": [
                      {
                        "id": "b504cf44-9ab8-4641-9934-38d1cc67242c",
                        "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                        "embedUrl": "https://www.youtube.com/embed/cEItmb_a20D",
                        "language": "nl",
                        "copyrightHolder": "publiq"
                      }
                    ],
                    "labels": [
                      "label1"
                    ],
                    "hiddenLabels": [
                      "label2"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/places/{placeId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "get": {
        "summary": "place - get",
        "tags": [
          "Places"
        ],
        "responses": {
          "200": {
            "description": "Place details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/place-with-read-example.json"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "place-get",
        "description": "Returns the details of the place for the given `placeId`."
      },
      "put": {
        "summary": "place - update",
        "operationId": "place-put",
        "responses": {
          "200": {
            "description": "The place was updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uuid",
                      "description": "The id of the updated place."
                    },
                    "placeId": {
                      "type": "string",
                      "deprecated": true,
                      "example": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uuid",
                      "description": "The id of the updated place (deprecated and replaced with `id`)."
                    },
                    "url": {
                      "type": "string",
                      "example": "https://io-test.uitdatabank.be/places/c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "format": "uri",
                      "description": "The url of the JSON-LD representation of the updated place."
                    },
                    "commandId": {
                      "type": "string",
                      "example": "92973349-967e-44d7-83a2-e1972d9e1622",
                      "format": "uuid",
                      "deprecated": true,
                      "description": "ID of the last internal command that was dispatched for this operation. Will be removed in the future."
                    }
                  },
                  "required": [
                    "id",
                    "placeId",
                    "url"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "placeId": "c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "url": "https://io-test.uitdatabank.be/places/c8e6ff82-8b30-4295-b937-ab2f4f6ab4bf",
                      "commandId": "92973349-967e-44d7-83a2-e1972d9e1622"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (name) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Updates the place with the given `placeId` by completely overwriting it with the properties in the given JSON. \n\n<!-- theme: danger -->\n\n> Any existing and optional properties on the place that are not included in the update request will be removed from the place.\n\n<!-- theme: info -->\n\n> Certain existing `labels` or `hiddenLabels` may be kept on the place even if they are not included in the update request. For example if they were added via the UiTdatabank UI, or if the client or user making the request does not have sufficient permission to remove specific labels.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam",
                      "fr": "Nom français",
                      "de": "Deutscher Name",
                      "en": "English name"
                    },
                    "address": {
                      "nl": {
                        "addressCountry": "BE",
                        "addressLocality": "Brussel",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      },
                      "fr": {
                        "addressCountry": "BE",
                        "addressLocality": "Bruxelles",
                        "postalCode": "1000",
                        "streetAddress": "Rue de la Loi 1"
                      },
                      "de": {
                        "addressCountry": "BE",
                        "addressLocality": "Brüssel",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      },
                      "en": {
                        "addressCountry": "BE",
                        "addressLocality": "Brussels",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      }
                    },
                    "status": {
                      "type": "Available",
                      "reason": {
                        "nl": "Nederlandse reden",
                        "fr": "Raison français",
                        "de": "Deutscher Grund",
                        "en": "English reason"
                      }
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    },
                    "calendarType": "periodic",
                    "startDate": "2021-05-17T22:00:00+00:00",
                    "endDate": "2021-05-17T22:00:00+00:00",
                    "openingHours": [
                      {
                        "opens": "17:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      }
                    ],
                    "availableFrom": "2021-05-17T22:00:00+00:00",
                    "terms": [
                      {
                        "id": "0.14.0.0.0",
                        "label": "Monument",
                        "domain": "eventtype"
                      }
                    ],
                    "typicalAgeRange": "6-12",
                    "description": {
                      "nl": "Nederlandse beschrijving",
                      "fr": "Description français",
                      "de": "Deutscher Beschreibung",
                      "en": "English description"
                    },
                    "priceInfo": [
                      {
                        "category": "base",
                        "price": 10.5,
                        "priceCurrency": "EUR",
                        "name": {
                          "nl": "Basistarief",
                          "fr": "Tarif de base",
                          "de": "Base tariff",
                          "en": "Basisrate"
                        }
                      }
                    ],
                    "contactPoint": {
                      "phone": [
                        "016/112233"
                      ],
                      "email": [
                        "info@example.com"
                      ],
                      "url": [
                        "https://www.example.com"
                      ]
                    },
                    "bookingInfo": {
                      "phone": "016/112233",
                      "email": "info@example.com",
                      "url": "https://www.example.com",
                      "urlLabel": {
                        "nl": "Nederlandse beschrijving",
                        "fr": "Description français",
                        "de": "Deutscher Beschreibung",
                        "en": "English description"
                      },
                      "availabilityStarts": "2021-05-17T22:00:00+00:00",
                      "availabilityEnds": "2021-05-17T22:00:00+00:00"
                    },
                    "mediaObject": [
                      {
                        "@id": "https://io-test.uitdatabank.be/images/74969172-E2A6-4626-BA63-4B6919242A24"
                      },
                      {
                        "@id": "https://io-test.uitdatabank.be/images/85b04295-479c-40f5-b3dd-469dfb4387b3",
                        "description": "optional overwritten description",
                        "copyrightHolder": "optional overwritten copyright holder",
                        "inLanguage": "nl"
                      }
                    ],
                    "videos": [
                      {
                        "id": "b504cf44-9ab8-4641-9934-38d1cc67242c",
                        "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                        "embedUrl": "https://www.youtube.com/embed/cEItmb_a20D",
                        "language": "nl",
                        "copyrightHolder": "publiq"
                      }
                    ],
                    "labels": [
                      "label1"
                    ],
                    "hiddenLabels": [
                      "label2"
                    ]
                  }
                }
              }
            }
          },
          "description": "The complete details of the place to update."
        },
        "tags": [
          "Places"
        ]
      },
      "delete": {
        "summary": "place - delete",
        "operationId": "place-delete",
        "responses": {
          "204": {
            "description": "No Content. The place's `workflowStatus` was successfully updated to `DELETED`."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Does a soft-delete of the place. The place will continue to exist but it's `workflowStatus` will be changed to `DELETED`. This will remove it from all publication channels.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Places"
        ],
        "x-internal": false
      }
    },
    "/places/{placeId}/available-from": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "put": {
        "summary": "availableFrom - update",
        "operationId": "place-availableFrom-put",
        "responses": {
          "204": {
            "description": "No Content. The place availableFrom was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/availableFrom",
                          "error": "The data (int) should match the type: date-time"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Places"
        ],
        "description": "Updates the availableFrom of the place. This is the first date & time that the place is allowed to be visible on publication channels.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place-availableFrom-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "availableFrom": "2021-05-17T22:00:00+00:00"
                  }
                }
              }
            }
          },
          "description": "New availableFrom to set on the place."
        }
      }
    },
    "/places/{placeId}/calendar": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "put": {
        "summary": "calendar - update",
        "tags": [
          "Places"
        ],
        "responses": {
          "204": {
            "description": "No Content. The calendar information has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (calendarType) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "place-calendar-put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place-calendar-put.json"
              },
              "examples": {
                "periodic": {
                  "value": {
                    "calendarType": "periodic",
                    "startDate": "2021-05-17T22:00:00+00:00",
                    "endDate": "2021-05-17T22:00:00+00:00",
                    "openingHours": [
                      {
                        "opens": "13:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      },
                      {
                        "opens": "09:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday",
                          "sunday"
                        ]
                      }
                    ],
                    "status": {
                      "type": "Available"
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    }
                  }
                },
                "permanent": {
                  "value": {
                    "calendarType": "permanent",
                    "openingHours": [
                      {
                        "opens": "13:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "monday"
                        ]
                      },
                      {
                        "opens": "09:00",
                        "closes": "17:00",
                        "dayOfWeek": [
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday",
                          "sunday"
                        ]
                      }
                    ],
                    "status": {
                      "type": "Available"
                    },
                    "bookingAvailability": {
                      "type": "Available"
                    }
                  }
                }
              }
            }
          },
          "description": "New calendar information."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "description": "Updates the calendar information of the given `placeId`. The calendar information will be completely replaced with the new one.\n\nThe required properties depend on the `calendarType` property.\n\n| calendarType  | required  | optional  |\n|---|---|---|\n| periodic  | startDate, endDate  | openingHours, status, bookingAvailability  |\n| permanent  |   | openingHours, status, bookingAvailability  |\n\n<!-- theme: warning -->\n\n> If the event has a `status` or `bookingAvailability` that is not `Available`, and you do not include this `status` or `bookingAvailability` in the new calendar information, they will get reverted back to the default `Available`!\n\n<!-- theme: danger -->\n\n> Contrary to events, places cannot use calendarType `single` or `multiple`!"
      }
    },
    "/places/{placeId}/calendar-summary": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "get": {
        "summary": "calendar summary - get",
        "tags": [
          "Places"
        ],
        "responses": {
          "200": {
            "description": "The calendar summary in either plain text or HTML.\n\nFor example:\n```\nVan 6 januari 2021 tot 23 juni 2021 (geannuleerd)\n```\n\nOr:\n```\n<span class=\\\"cf-from cf-meta\\\">Van</span> <span class=\\\"cf-date\\\">6 januari 2021</span> <span class=\\\"cf-to cf-meta\\\">tot</span> <span class=\\\"cf-date\\\">23 juni 2021</span> <span title=\\\"Deze activiteit is waarschijnlijk geannuleerd omwille van prplaceieve coronamaatregelen.\\\" class=\\\"cf-status\\\">(geannuleerd)</span>\n```"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "place-calendar-summary-get",
        "description": "Returns a human-readable summary of the calendar information of the place. Can be configured to return either plain text or HTML, and to switch between four different formats depending on the amount of space you have to display it.\n\n> For backward compatibility this endpoint is also accessible at the old abbreviated `/places/{placeId}/calsum` path.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "text",
                "html"
              ],
              "default": "text"
            },
            "in": "query",
            "name": "style",
            "description": "Deprecated alternative to the `accept` header. Supported for backward compatibility.",
            "deprecated": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "xs",
                "sm",
                "md",
                "lg"
              ],
              "default": "lg"
            },
            "in": "query",
            "name": "size",
            "description": "Defines the size of the summary. Larger summaries contain more detail for events with multiple dates/hours but will also take up more space when shown in a UI. We recommend to use the format `md` for the search results (and `lg` for events with calendarType single), and to always use `lg` for the detailpage. In some cases (e.g. mobile apps) calendar summary `xs` can be useful"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "nl",
                "fr",
                "en",
                "de"
              ],
              "default": "nl"
            },
            "in": "query",
            "name": "language",
            "description": "Defines the language that the summary will be written in. Also influences the date/time format used."
          },
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "in": "query",
            "name": "hidePast",
            "description": "Will hide past dates in summaries of events with multiple dates. By default, past dates are not excluded from the calendar summary."
          },
          {
            "schema": {
              "type": "string",
              "default": "Europe/Brussels"
            },
            "in": "query",
            "name": "timezone",
            "description": "The timezone to format date/times in."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "text/plain",
                "text/html"
              ]
            },
            "in": "header",
            "name": "accept",
            "description": "Indicates the expected content-type. Defaults to `text/plain` but can be set to `text/html` for a HTML response."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "nl_BE",
                "fr_BE",
                "en_BE",
                "de_BE"
              ]
            },
            "in": "query",
            "name": "langCode",
            "description": "Deprecated alternative to the `language` query parameter. Supported for backward compatibility.",
            "deprecated": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "xs",
                "sm",
                "md",
                "lg"
              ]
            },
            "in": "query",
            "name": "format",
            "deprecated": true,
            "description": "Deprecated alternative to the `size` query parameter. Supported for backward compatibility."
          }
        ],
        "x-internal": false
      }
    },
    "/places/{placeId}/facilities": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "put": {
        "summary": "facilities - update",
        "operationId": "place-facilities-put",
        "responses": {
          "204": {
            "description": "No Content. The facilities have been successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Places"
        ],
        "description": "Updates the list of available (accessibility) facilities on the place. These will show up in the [place's `terms`](/models/place-terms.json).\n\nA list of possible facilities can be found using our [Terms guide](/docs/terms.md).\n\n**Note**: A special permission is required to update an place's facilities in UiTdatabank, even if you are the place owner. Contact an administrator for further information.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place-facilities-put.json"
              },
              "examples": {
                "Example": {
                  "value": [
                    "3.13.2.0.0",
                    "3.23.2.0.0"
                  ]
                }
              }
            }
          },
          "description": "New list of facilities to set on the event. Facilities previously set on the event but not included in this list will be removed from the event. Other terms will be preserved."
        }
      }
    },
    "/places/{placeId}/history": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "get": {
        "summary": "history - get",
        "tags": [
          "Places"
        ],
        "responses": {
          "200": {
            "description": "Place history.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "",
                  "items": {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string",
                        "description": "A human-readable description of the update to the place. (Always in Dutch.)"
                      },
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2021-08-26T16:54:38+00:00",
                        "description": "The date and time that the update happened in an ISO-8601 format with a timezone offset. For example `2021-08-26T16:54:38+00:00`."
                      },
                      "author": {
                        "type": "string",
                        "description": "Identifier of the user who made the change. Should not be treated as a semantic user id though, because it can be an email, v1 user id, or v2 user id. Should only be displayed and used by admins that look at the history log to look up the user in the correct system."
                      },
                      "api": {
                        "type": "string",
                        "description": "Human-readable name of the API that was used to make the change. Not always present in older history logs."
                      },
                      "auth0ClientId": {
                        "type": "string",
                        "description": "The id of the Auth0 client that made the change. (If it was an Auth0 API client.)"
                      },
                      "auth0ClientName": {
                        "type": "string",
                        "description": "Name of the client in Auth0 that made the change. (If it was an Auth0 API client.)"
                      },
                      "apiKey": {
                        "type": "string",
                        "description": "API key of the UiTID v1 consumer that made the change (if it was an UiTID v1 consumer)."
                      },
                      "consumerName": {
                        "type": "string",
                        "description": "Name of the UiTID v1 consumer that made the change (if it was an UiTID v1 consumer)."
                      }
                    },
                    "required": [
                      "description",
                      "date"
                    ]
                  }
                },
                "examples": {
                  "Auth0 client": {
                    "value": [
                      {
                        "date": "2021-09-30T14:57:17+00:00",
                        "description": "Locatie aangemaakt in UiTdatabank",
                        "author": "google-oauth2|108326107941342286958",
                        "auth0ClientId": "JGJ3rAJLurRM9DHDE072zVhF3azl57mo",
                        "auth0ClientName": "UiTdatabase JWT Provider",
                        "api": "JSON-LD API"
                      }
                    ]
                  },
                  "UiTID v1 consumer": {
                    "value": [
                      {
                        "date": "2021-10-04T09:40:59+00:00",
                        "description": "Reservatie-info aangepast",
                        "author": "google-oauth2|108326107941342286958",
                        "apiKey": "deb306a6-6f46-4c98-89ce-b03ec4fd11e2",
                        "api": "JSON-LD API",
                        "consumerName": "UiTdatabank Acceptatie"
                      }
                    ]
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "place-history-get",
        "description": "Returns the history log of the place for the given `placeId`.\n\nThe history log is an array of objects that contain info about each individual update to the place, who did the update, using what API, etc.\n\nBecause this history log can contain API keys which are secret (deprecated but still usable for backward compatibility), it can only be accessed by users that are a \"god user\".\n\nBecause of this limitation, the endpoint is also documented as internal and not visible in the public docs.",
        "x-internal": true,
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/places/{placeId}/major-info": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "put": {
        "operationId": "place-major-info-put",
        "description": "<!-- theme: danger -->\n\n> The major-info endpoint is deprecated and should not be used in new integrations!\n\nUpdates the \"major info\" of the event with the given `placeId`.\n\nThe major info contains:\n\n* `name`: The name of the place in the place's `mainLanguage`, as a string\n* `type`: Id of the place's `eventtype` taxonomy `term`, as a string\n* `theme` (optional): Id of the place's `theme` taxonomy `term`, as a string\n* `address`: Object with the address of the place (see schema below)\n* `calendar`: Object with the place's calendar information (see schema below)\n\nAll properties are required (except for `theme`) and will overwrite existing values of these properties on the place. If the place has a `theme` `term` before this update, but there is no `theme` in this major-info update, the `theme` will be removed.\n\n<!-- theme: success -->\n> For backward-compatibility with older integrations, this operation can also be requested via `POST /place/{placeId}/major-info`",
        "summary": "major-info - update",
        "deprecated": true,
        "responses": {
          "204": {
            "description": "No Content. The major-info has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A human-readable name in the main language of the place."
                  },
                  "type": {
                    "type": "string",
                    "description": "The `eventtype` term used to categorize the place. Terms are pre-defined and can be browsed in our [Terms](../docs/terms.md) guide."
                  },
                  "theme": {
                    "type": "string",
                    "description": "The `theme` term used to categorize the place. Terms are pre-defined and can be browsed in our [Terms](../docs/terms.md) guide."
                  },
                  "address": {
                    "$ref": "../models/common-address-localized.json",
                    "description": "The address the place is located at, in the main language of the place."
                  },
                  "calendar": {
                    "$ref": "../models/place-calendar-put.json"
                  }
                },
                "required": [
                  "name",
                  "type",
                  "address",
                  "calendar"
                ]
              },
              "examples": {
                "Permanent with opening hours": {
                  "value": {
                    "name": "Sint-Pieterskerk",
                    "type": "0.14.0.0.0",
                    "theme": "1.44.0.0.0",
                    "address": {
                      "streetAddress": "Grote Markt 1",
                      "postalCode": "3000",
                      "addressLocality": "Leuven",
                      "addressCountry": "BE"
                    },
                    "calendar": {
                      "calendarType": "permanent",
                      "openingHours": [
                        {
                          "opens": "10:00",
                          "closes": "16:30",
                          "dayOfWeek": [
                            "monday",
                            "tuesday",
                            "thursday",
                            "friday",
                            "saturday"
                          ]
                        },
                        {
                          "opens": "11:00",
                          "closes": "16:30",
                          "dayOfWeek": [
                            "sunday"
                          ]
                        }
                      ]
                    }
                  }
                },
                "Periodic with opening hours": {
                  "value": {
                    "name": "Velodroom",
                    "type": "Yf4aZBfsUEu2NsQqsprngw",
                    "address": {
                      "streetAddress": "Brusselsestraat",
                      "postalCode": "3000",
                      "addressLocality": "Leuven",
                      "addressCountry": "BE"
                    },
                    "calendar": {
                      "calendarType": "periodic",
                      "startDate": "2021-05-17T22:00:00+00:00",
                      "endDate": "2023-11-17T22:00:00+00:00",
                      "openingHours": [
                        {
                          "opens": "17:00",
                          "closes": "22:00",
                          "dayOfWeek": [
                            "thursday",
                            "friday"
                          ]
                        },
                        {
                          "opens": "13:00",
                          "closes": "22:00",
                          "dayOfWeek": [
                            "saturday",
                            "sunday"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "description": "All required fields for a place (whether they have been updated or not)."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Places"
        ]
      }
    },
    "/places/{placeId}/name/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        },
        {
          "$ref": "#/components/parameters/language"
        }
      ],
      "put": {
        "summary": "name - update",
        "tags": [
          "Places"
        ],
        "responses": {
          "204": {
            "description": "No Content. The name was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "place-name-put",
        "description": "Updates the localized name of a place based on the given `placeId` and `language` inside the URL.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place-name-put.json"
              },
              "examples": {}
            }
          },
          "description": "The new name of the place."
        }
      }
    },
    "/places/{placeId}/price-info": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "put": {
        "summary": "priceInfo - update",
        "tags": [
          "Places"
        ],
        "responses": {
          "204": {
            "description": "No Content. The priceInfo was successfully updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "error": "Tariff name \"Kinderen\" must be unique.",
                          "jsonPointer": "/priceInfo/1/name/nl"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "place-price-info-put",
        "description": "Updates the price info of a place.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place-priceInfo.json"
              },
              "examples": {}
            }
          },
          "description": "New priceInfo to set on the place."
        }
      }
    },
    "/places/{placeId}/type/{termId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        },
        {
          "$ref": "#/components/parameters/termId"
        }
      ],
      "put": {
        "summary": "type - update",
        "operationId": "place-type-put",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Places"
        ],
        "description": "Updates the place's type (examples of types are `Bioscoop`, `Monument`, `Theater`, and so on) based on the given `placeId` and `termId`.\n\nTerms are pre-defined and can be found using our [Terms](/docs/terms.md) guide. Only terms from the `eventtype` domain can be used as place types.\n\nIf the `placeId` does not exist a `404 Not Found` will be returned. If the `termId` does not exist or is not a term in the `eventtype` domain, a `400 Bad Request` will be returned. If the request is successful a `204 No Content` will be returned.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/places/{placeId}/videos": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        }
      ],
      "post": {
        "summary": "videos - add",
        "operationId": "place-videos-post",
        "responses": {
          "200": {
            "description": "The video was added to the place.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "videoId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "b504cf44-9ab8-4641-9934-38d1cc67242c",
                      "description": "UUID used to identify the video on the place."
                    }
                  }
                },
                "examples": {
                  "The new videoId": {
                    "value": {
                      "videoId": "b504cf44-9ab8-4641-9934-38d1cc67242c"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/url",
                          "error": "The required properties url is missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place-videos-post.json"
              },
              "examples": {
                "Video from Youtube and with Copyright": {
                  "value": {
                    "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                    "language": "nl",
                    "copyrightHolder": "publiq"
                  }
                },
                "Video from Vimeo": {
                  "value": {
                    "url": "https://www.vimeo.com/4dwe2",
                    "language": "nl"
                  }
                },
                "Video from Youtube with Url Shortener": {
                  "value": {
                    "url": "https://youtu.be/bsaAOun-dec",
                    "language": "nl",
                    "copyrightHolder": "publiq"
                  }
                }
              }
            }
          },
          "description": "The new video to add to a place."
        },
        "description": "Add a video as a URL reference to place\n\nThe video objects contains:\n\n* `url`: The full URL of the video. Currently only *Vimeo* and *Youtube* are supported as video source locations.\n* `copyrightHolder`: The copyright holder of the video material. Although this field is optional it is strongly recommended to add a reference to the entity owning the rights on the video material.",
        "tags": [
          "Places"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      },
      "patch": {
        "summary": "videos - patch",
        "operationId": "places-videos-patch",
        "responses": {
          "204": {
            "description": "No Content. The videos are updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/url",
                          "error": "The required properties url is missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Update one or more videos of a place.\n\nThe video object(s) must contain\n\n* `id`: The id of the video object to be changed.\n\nThe video object(s) can contain:\n\n* `url`: The full URL of the video. Currently only *Vimeo* and *Youtube* are supported as video source locations.\n* `language`: The updated language of a video\n* `copyrightHolder`: The copyright holder of the video material. Although this field is optional it is strongly recommended to add a reference to the entity owning the rights on the video material.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/place-videos-patch.json"
              },
              "examples": {
                "Videos to be updated.": {
                  "value": [
                    {
                      "id": "30a880ba-c406-4308-8031-eb39c334f8c2",
                      "url": "https://www.youtube.com/watch?v=cEItmb_a20D",
                      "language": "fr",
                      "copyrightHolder": "publiq"
                    },
                    {
                      "id": "55f3859b-ad56-426e-acd8-435401372019",
                      "copyrightHolder": "Creative Commons"
                    }
                  ]
                }
              }
            }
          },
          "description": "An array of videos to be changed."
        },
        "tags": [
          "Places"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/places/{placeId}/videos/{videoId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/placeId"
        },
        {
          "$ref": "#/components/parameters/videoId"
        }
      ],
      "delete": {
        "summary": "videos - delete",
        "operationId": "place-videos-delete",
        "responses": {
          "204": {
            "description": "No Content. The video was deleted from the place."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Delete an embedded video from an place based on the place id and the video id.",
        "tags": [
          "Places"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers": {
      "post": {
        "summary": "organizer - create",
        "description": "Creates a new organizer.\n\n<!-- theme: info -->\n\n> Organizers are required to have a unique `url` value to avoid accidental duplicate organizers.\n\n<!-- theme: warning -->\n\n> This request is also supported with an older, deprecated schema that was used to create an organizer with just its required fields.",
        "operationId": "organizer-post",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "201": {
            "description": "The organizer has been created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of newly created organizer."
                    },
                    "organizerId": {
                      "type": "string",
                      "description": "The id of newly created organizer. (Deprecated in favor of `id`.)",
                      "deprecated": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The url of the JSON-LD data of the newly created organizer."
                    }
                  },
                  "required": [
                    "id",
                    "organizerId",
                    "url"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "6b476d79-c404-425f-8b1c-357e39a60410",
                      "organizerId": "6b476d79-c404-425f-8b1c-357e39a60410",
                      "url": "https://io-test.uitdatabank.be/organizers/6b476d79-c404-425f-8b1c-357e39a60410"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data\n* https://api.publiq.be/probs/uitdatabank/duplicate-url",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "requestBody": {
          "description": "The complete details of the new organizer to create.",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "../models/organizer.json"
                  },
                  {
                    "$ref": "../models/organizer-post-deprecated.json"
                  }
                ]
              },
              "examples": {
                "Organizer with all possible fields": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam"
                    },
                    "url": "https://www.publiq.be",
                    "address": {
                      "nl": {
                        "addressCountry": "BE",
                        "addressLocality": "Brussel",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      }
                    },
                    "contactPoint": {
                      "phone": [
                        "+32/1234567890"
                      ],
                      "email": [
                        "info@publiq.be"
                      ],
                      "url": [
                        "https://www.publiq.be"
                      ]
                    },
                    "labels": [
                      "label1",
                      "label2"
                    ],
                    "hiddenLabels": [
                      "labelA",
                      "labelB"
                    ],
                    "images": [
                      {
                        "@id": "https://io-test.uitdatabank.be/images/74969172-E2A6-4626-BA63-4B6919242A24"
                      },
                      {
                        "@id": "https://io-test.uitdatabank.be/images/85b04295-479c-40f5-b3dd-469dfb4387b3",
                        "description": "optional overwritten description",
                        "copyrightHolder": "optional overwritten copyright holder",
                        "inLanguage": "nl"
                      }
                    ]
                  }
                },
                "Organizer with only required fields": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam"
                    },
                    "url": "https://www.publiq.be"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers/{organizerId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        }
      ],
      "get": {
        "summary": "organizer - get",
        "operationId": "organizer-get",
        "responses": {
          "200": {
            "description": "Organizer details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "../models/organizer-with-read-example.json"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Returns an the organizer with the given `organizerId`",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Organizers"
        ]
      },
      "put": {
        "summary": "organizer - update",
        "operationId": "organizer-put",
        "responses": {
          "200": {
            "description": "The organizer has been updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The id of the updated organizer."
                    },
                    "organizerId": {
                      "type": "string",
                      "description": "The id of the updated organizer. (Deprecated in favor of `id`.)",
                      "deprecated": true
                    },
                    "url": {
                      "type": "string",
                      "description": "The url of the JSON-LD data of the updated organizer."
                    }
                  },
                  "required": [
                    "id",
                    "organizerId",
                    "url"
                  ]
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "6b476d79-c404-425f-8b1c-357e39a60410",
                      "organizerId": "6b476d79-c404-425f-8b1c-357e39a60410",
                      "url": "https://io-test.uitdatabank.be/organizers/6b476d79-c404-425f-8b1c-357e39a60410"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data\n* https://api.publiq.be/probs/uitdatabank/duplicate-url",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "description": "Updates the organizer with the given `organizerId` by completely overwriting it with the properties in the given JSON. \n\n<!-- theme: danger -->\n\n> Any existing (optional) properties on the organizer that are not included in the update request will be removed from the organizer.\n\n<!-- theme: info -->\n\n> Certain existing `labels` or `hiddenLabels` may be kept on the organizer even if they are not included in the update request. For example if they were added via the UiTdatabank UI, or if the client or user making the request does not have sufficient permission to remove specific labels.",
        "requestBody": {
          "description": "The complete details of the organizer to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer.json"
              },
              "examples": {
                "Organizer with all possible fields": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam"
                    },
                    "url": "https://www.publiq.be",
                    "address": {
                      "nl": {
                        "addressCountry": "BE",
                        "addressLocality": "Brussel",
                        "postalCode": "1000",
                        "streetAddress": "Wetstraat 1"
                      }
                    },
                    "contactPoint": {
                      "phone": [
                        "+32/1234567890"
                      ],
                      "email": [
                        "info@publiq.be"
                      ],
                      "url": [
                        "https://www.publiq.be"
                      ]
                    },
                    "labels": [
                      "label1",
                      "label2"
                    ],
                    "hiddenLabels": [
                      "labelA",
                      "labelB"
                    ],
                    "images": [
                      {
                        "@id": "https://io-test.uitdatabank.be/images/74969172-E2A6-4626-BA63-4B6919242A24"
                      },
                      {
                        "@id": "https://io-test.uitdatabank.be/images/85b04295-479c-40f5-b3dd-469dfb4387b3",
                        "description": "optional overwritten description",
                        "copyrightHolder": "optional overwritten copyright holder",
                        "inLanguage": "nl"
                      }
                    ]
                  }
                },
                "Organizer with only required fields": {
                  "value": {
                    "mainLanguage": "nl",
                    "name": {
                      "nl": "Nederlandse naam"
                    },
                    "url": "https://www.publiq.be"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Organizers"
        ]
      },
      "delete": {
        "summary": "organizer - delete",
        "description": "<!-- theme: info !-->\n> Note: only users with the permissions `Organisaties beheren` can delete an organizer.\n\nDelete the organizer with the given `organizerId`.",
        "operationId": "delete-organizer",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "x-internal": true
      }
    },
    "/organizers/{organizerId}/address/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        },
        {
          "$ref": "#/components/parameters/language"
        }
      ],
      "put": {
        "summary": "address - update",
        "description": "Updates the address of the organizer with the given `organizerId`. The new address of the request body will be set on the organizer in the given `language`.\n\nAn address consists of the following properties which are all required:\n* streetAddress: the street name and street number\n* postalCode: the postal code\n* addressLocality: the town or city\n* addressCountry: the 2-character country code",
        "operationId": "organizer-address-put",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer address has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (streetAddress) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "New address to set on the organizer (localized in the given language in the URL).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-address-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "streetAddress": "Kerkstraat 2",
                    "postalCode": "3000",
                    "addressLocality": "Leuven",
                    "addressCountry": "BE"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers/{organizerId}/address": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        }
      ],
      "put": {
        "summary": "address.nl - update",
        "description": "<!-- theme: warning -->\n\n> This endpoint is deprecated, use [`PUT /organizers/{organizerId}/address/{language}`](/reference/entry.json/paths/~1organizers~1{organizerId}~1address~1{language}/put) instead.\n\n\nUpdates the address of the organizer with the given `organizerId`. The new address of the request body will be set on the organizer in the default language `nl`.\n\nAn address consists of the following properties which are all required:\n* streetAddress: the street name and street number\n* postalCode: the postal code\n* addressLocality: the town or city\n* addressCountry: the 2-character country code",
        "operationId": "organizer-address-nl-put",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer address has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (streetAddress) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "New address to set on the organizer (localized in the `nl` language).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-address-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "streetAddress": "Kerkstraat 2",
                    "postalCode": "3000",
                    "addressLocality": "Leuven",
                    "addressCountry": "BE"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "deprecated": true
      },
      "delete": {
        "summary": "address - delete",
        "description": "Delete the address of the organizer with the given `organizerId`.",
        "operationId": "organizer-address-delete",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer address has been deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "x-internal": true
      }
    },
    "/organizers/{organizerId}/contact-point": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        }
      ],
      "put": {
        "summary": "contactPoint - update",
        "description": "Updates the contact point information of the organizer with the given `organizerId`. A contact point has a list of the following properties:\n* Url: an array of valid urls\n* Email: an array of valid emails\n* Phone: an array of phone numbers\n\nAll properties are optional.",
        "operationId": "organizer-contactPoint-put",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer contact point has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "New contact point to set on the organizer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-contactPoint-put.json"
              },
              "examples": {
                "Update multiple values": {
                  "value": {
                    "url": [
                      "https://www.publiq.be",
                      "https://www.cultuurnet.be"
                    ],
                    "email": [
                      "info@publiq.be",
                      "info@cultuurnet.be"
                    ],
                    "phone": [
                      "016 10 20 30",
                      "016 11 22 33",
                      "016 99 99 99"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers/{organizerId}/description/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        },
        {
          "$ref": "#/components/parameters/language"
        }
      ],
      "put": {
        "summary": "description - update",
        "description": "Updates the description of the organizer with the given `organizerId`. The new description of the request body will be set on the organizer in the given `language`. The new description needs to be at least one character long.",
        "operationId": "organizer-description-put",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer description has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (description) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "New description to set on the organizer (localized in the given language in the URL).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-description-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "description": "This organizer is responsible for creating cultural events for schools around Brussels."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      },
      "delete": {
        "summary": "description - delete",
        "operationId": "organizer-description-delete",
        "responses": {
          "204": {
            "description": "No Content. The description was deleted."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "tags": [
          "Organizers"
        ],
        "description": "Deletes the description in the given `language` from the organizer with the given `organizerId`.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers/{organizerId}/images": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        }
      ],
      "post": {
        "summary": "images - add",
        "operationId": "organizer-images-post",
        "responses": {
          "204": {
            "description": "The image was added to the organizer."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/url",
                          "error": "The required properties url is missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-image-post.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "id": "546a90cd-a238-417b-aa98-1b6c50c1345c",
                    "language": "nl",
                    "copyrightHolder": "publiq",
                    "description": "Picture of the last publiq event"
                  }
                }
              }
            }
          },
          "description": "The image to add to an organizer."
        },
        "description": "Add an image to an organizer.\n\nThe image objects contains the following properties:\n* `id`: the id of the image which is required\n* `language`: an optional language of the image and description\n* `copyrightHolder`: the optional copyright holder of the image\n* `description`: the description of the image which is also optional\n\n<!-- theme: info -->\n> The optional fields that are not provided will get the values from the properties of the orginally uploaded image.",
        "tags": [
          "Organizers"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      },
      "patch": {
        "summary": "images - patch",
        "operationId": "organizer-images-patch",
        "responses": {
          "204": {
            "description": "The images were updated."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/0",
                          "error": "The required properties (id) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Update one or more images of an organizer.\n\nThe images to update are identified by their `id`. It is possible to update one or more of the following properties:\n\n* The `language` of an image\n* The `description` of an image\n* The `copyrightHolder` of an image\n\nOnly images included in the `PATCH` request will be updated. Other images that also exist on the organizer will not be removed or updated.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-images-patch.json"
              }
            }
          },
          "description": "Images to update on the organizer. Images previously added to the organizer but not included in this request will be preserved."
        },
        "tags": [
          "Organizers"
        ]
      }
    },
    "/organizers/{organizerId}/images/{imageId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        },
        {
          "$ref": "#/components/parameters/imageId"
        }
      ],
      "delete": {
        "summary": "images - delete",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "The image was removed from the organizer."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "organizer-image-delete",
        "description": "Remove an image from an organizer.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers/{organizerId}/labels/{labelName}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        },
        {
          "$ref": "#/components/parameters/labelName"
        }
      ],
      "put": {
        "summary": "labels - add",
        "description": "Adds the given label to the organizer with the given `organizerId`.\n\nIf the specified label does not exist yet in UiTdatabank a new label will be created with default visibility and public permissions (usable by anyone), and linked to the organizer.\n\nThe label must be longer than 1 character and shorter than 255 characters. The label can also not contain the semicolon character. It should match the regex `^(?=.{2,255}$)(?=.*\\S.*\\S.*)[^;]*$`",
        "operationId": "organizer-labels-add",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The label has been added successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      },
      "delete": {
        "summary": "labels - delete",
        "description": "Deletes the given label from the organizer with the given `organizerId`.\n\nThe label must be longer than 1 character and shorter than 255 characters. The label can also not contain the semicolon character. It should match the regex `^(?=.{2,255}$)(?=.*\\S.*\\S.*)[^;]*$`",
        "operationId": "organizer-labels-delete",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The label has been deleted from the organizer successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers/{organizerId}/images/main": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        }
      ],
      "put": {
        "summary": "mainImage - update",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "Main image was set"
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/imageId",
                          "error": "The required properties (imageId) are missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "operationId": "organizer-mainImage-update",
        "description": "Sets the main image of an organizer. This only requires the `imageId` of the image to set as main.\n\n<!-- theme: info -->\n> For backwards compatible reasons `mediaObjectId` is also supported.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-main-image-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "imageId": "4b349765-9499-4d35-b295-c82ede576cf0"
                  }
                }
              }
            }
          },
          "description": "The image id of the new main image."
        }
      }
    },
    "/organizers/{organizerId}/name/{language}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        },
        {
          "$ref": "#/components/parameters/language"
        }
      ],
      "put": {
        "summary": "name - update",
        "description": "Updates the name of the organizer with the given `organizerId`. The new name of the request body will be set on the organizer in the given `language`. The new name needs to be at least one character long.",
        "operationId": "organizer-name-put",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer name has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (name) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "New name to set on the organizer (localized in the given language in the URL).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-name-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "publiq"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/organizers/{organizerId}/name": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        }
      ],
      "put": {
        "summary": "name.nl - update",
        "description": "<!-- theme: warning -->\n\n> This endpoint is deprecated, use [`PUT /organizers/{organizerId}/name/{language}`](/reference/entry.json/paths/~1organizers~1{organizerId}~1name~1{language}/put) instead.\n\nUpdates the name of the organizer with the given `organizerId`. The new name of the request body will be set on the organizer with default language `nl`. The new name needs to be at least one character long.",
        "operationId": "organizer-name-nl-put",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer name has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (name) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "New name to set on the organizer (localized in the `nl` language).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-name-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "publiq"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "deprecated": true
      }
    },
    "/organizers/{organizerId}/url": {
      "parameters": [
        {
          "$ref": "#/components/parameters/organizerId"
        }
      ],
      "put": {
        "summary": "url - update",
        "description": "Updates the url of the organizer with the given `organizerId`. The provided url can not be in use on another organizer.",
        "operationId": "organizer-url-put",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "204": {
            "description": "No Content. The organizer url has been updated successfully."
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data\n* https://api.publiq.be/probs/uitdatabank/duplicate-url",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/",
                          "error": "The required properties (url) are missing"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "requestBody": {
          "description": "New url to set on the organizer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/organizer-url-put.json"
              },
              "examples": {
                "Example": {
                  "value": {
                    "url": "https://www.publiq.be"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ]
      }
    },
    "/news-articles": {
      "post": {
        "summary": "news article - create",
        "operationId": "news-articles-post",
        "responses": {
          "201": {
            "description": "The News Article was created successfully",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "../models/newsArticle.json"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "../models/newsArticle.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/url",
                          "error": "The required property url is missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a news article.\n\n<!-- theme: warning -->\n\n> If a news article with the same `url` and `about` already exists, this request will result in a `400` error response to prevent duplicates. If you want to update the existing news article instead, find it programmatically using [`GET /news-articles`](reference/entry.json/paths/~1news-articles/get) with `url` and `about` query parameters, and send a [`PUT /news-articles/{articleId}`](/reference/entry.json/paths/~1news-articles~1{articleId}/put) request instead.\n\n<!-- theme: info -->\n\n> For backward compatibility with older API clients, this path is also available at `/news_articles`. However the preferred path is `/news-articles`.",
        "x-internal": true,
        "requestBody": {
          "description": "The complete details of the new news article to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/newsArticle-post.json"
              }
            }
          }
        },
        "tags": [
          "News articles"
        ]
      },
      "get": {
        "summary": "news article - search",
        "description": "Returns the details of all news articles matching the provided search. The search can be created based on a combination of 3 query parameters:\n- `publisher`\n- `about`\n- `url`\n\nBasic pagination is supported and the results are limited to 30 news articles.\n\nThe extra query parameter `page` can be used to get news articles after the first 30 results.\n\n<!-- theme: info -->\n\n> For backward compatibility with older API clients, this path is also available at `/news_articles`. However the preferred path is `/news-articles`.",
        "operationId": "news-articles-get",
        "responses": {
          "200": {
            "description": "News Articles details",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "description": "News article results for the requested page.",
                      "items": {
                        "$ref": "../models/newsArticle.json"
                      }
                    }
                  }
                },
                "examples": {
                  "Example": {
                    "value": {
                      "hydra:member": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "headline": "API reward for publiq",
                          "inLanguage": "en",
                          "text": "This year publiq won an API reward for it's innovative RESTful API",
                          "about": "17284745-7bcf-461a-aad0-d3ad54880e75",
                          "publisher": "BILL",
                          "publisherLogo": "https://www.bill.be/img/favicon.png",
                          "url": "https://www.bill.be/blog/publiq-award"
                        },
                        {
                          "id": "9bf7f5fa-4a0b-4475-9ebb-f776e33510f5",
                          "headline": "madewithlove maakt een API",
                          "inLanguage": "nl",
                          "text": "madewithlove maakt een RESTful API in samenwerking met publiq",
                          "about": "a359d337-4f83-4d05-9b81-b1f048ad2309",
                          "publisher": "BUZZ",
                          "publisherLogo": "https://www.buzz.be/img/favicon.png",
                          "url": "https://www.buzz.be/blog/api"
                        }
                      ]
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "../models/newsArticle.json"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                        "headline": "API reward for publiq",
                        "inLanguage": "en",
                        "text": "This year publiq won an API reward for it's innovative RESTful API",
                        "about": "17284745-7bcf-461a-aad0-d3ad54880e75",
                        "publisher": "BILL",
                        "publisherLogo": "https://www.bill.be/img/favicon.png",
                        "url": "https://www.bill.be/blog/publiq-award"
                      },
                      {
                        "id": "9bf7f5fa-4a0b-4475-9ebb-f776e33510f5",
                        "headline": "madewithlove maakt een API",
                        "inLanguage": "nl",
                        "text": "madewithlove maakt een RESTful API in samenwerking met publiq",
                        "about": "a359d337-4f83-4d05-9b81-b1f048ad2309",
                        "publisher": "BUZZ",
                        "publisherLogo": "https://www.buzz.be/img/favicon.png",
                        "url": "https://www.buzz.be/blog/api"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-internal": true,
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "in": "query",
            "name": "publisher",
            "description": "The publisher of the News Article"
          },
          {
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "in": "query",
            "name": "about",
            "description": "The id of the event this News Article is about"
          },
          {
            "schema": {
              "type": "string",
              "pattern": "^http[s]?:\\/\\/",
              "format": "uri"
            },
            "in": "query",
            "name": "url",
            "description": "The url of the News Article"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "page",
            "description": "The page the results should start from"
          }
        ],
        "tags": [
          "News articles"
        ]
      }
    },
    "/news-articles/{articleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/articleId"
        }
      ],
      "get": {
        "summary": "news article - get",
        "description": "Returns the details of a news article with the given article id.\n\n<!-- theme: info -->\n\n> For backward compatibility with older API clients, this path is also available at `/news_articles/{articleId}`. However the preferred path is `/news-articles/{articleId}`.",
        "operationId": "news-article-get",
        "responses": {
          "200": {
            "description": "News Article details",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "../models/newsArticle.json"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "headline": "API reward for publiq",
                      "inLanguage": "nl",
                      "text": "This year publiq won an API reward for it's innovative RESTful API",
                      "about": "17284745-7bcf-461a-aad0-d3ad54880e75",
                      "publisher": "BILL",
                      "publisherLogo": "https://www.bill.be/img/favicon.png",
                      "url": "https://www.bill.be/blog/publiq-award"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "../models/newsArticle.json"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "@context": "/contexts/NewsArticle",
                      "@id": "/news-articles/497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "@type": "https://schema.org/NewsArticle",
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "headline": "API reward for publiq",
                      "inLanguage": "nl",
                      "text": "This year publiq won an API reward for it's innovative RESTful API",
                      "about": "17284745-7bcf-461a-aad0-d3ad54880e75",
                      "publisher": "BILL",
                      "publisherLogo": "https://www.bill.be/img/favicon.png",
                      "url": "https://www.bill.be/blog/publiq-award"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "x-internal": true,
        "tags": [
          "News articles"
        ]
      },
      "put": {
        "summary": "news article - update",
        "operationId": "news-article-put",
        "responses": {
          "200": {
            "description": "The News Article was update successfully.",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "../models/newsArticle.json"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "../models/newsArticle.json"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible error types:\n\n* https://api.publiq.be/probs/body/missing\n* https://api.publiq.be/probs/body/invalid-syntax\n* https://api.publiq.be/probs/body/invalid-data",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid data": {
                    "value": {
                      "type": "https://api.publiq.be/probs/body/invalid-data",
                      "title": "Invalid body data",
                      "status": 400,
                      "schemaErrors": [
                        {
                          "jsonPointer": "/url",
                          "error": "The required property url is missing."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        },
        "description": "Updates an existing news article.\n\n<!-- theme: info -->\n\n> For backward compatibility with older API clients, this path is also available at `/news_articles/{articleId}`. However the preferred path is `/news-articles/{articleId}`.",
        "x-internal": true,
        "requestBody": {
          "description": "The complete details of the news article to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "../models/newsArticle-post.json"
              }
            }
          }
        },
        "tags": [
          "News articles"
        ]
      },
      "delete": {
        "summary": "news article - delete",
        "operationId": "news-article-delete",
        "responses": {
          "204": {
            "description": "The News Article with the given article id was deleted."
          }
        },
        "description": "Delete a news article with the given article id.\n\n<!-- theme: info -->\n\n> For backward compatibility with older API clients, this path is also available at `/news_articles/{articleId}`. However the preferred path is `/news-articles/{articleId}`.",
        "x-internal": true,
        "tags": [
          "News articles"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "$ref": "https://raw.githubusercontent.com/cultuurnet/apidocs/main/projects/errors/models/Error.json",
        "x-internal": true
      }
    },
    "securitySchemes": {
      "USER_ACCESS_TOKEN": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "",
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {}
          }
        },
        "description": "A user access token, obtained by redirecting the end user to publiq's authorization server to login. See the [authentication docs about user access tokens](https://publiq.stoplight.io/docs/authentication/docs/user-access-token.md) for more info."
      },
      "CLIENT_ACCESS_TOKEN": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {}
          }
        },
        "description": "A client access token, obtained by exchanging your client id and client secret for a token via an HTTP request to publiq's authorization server. See the [authentication docs about client access tokens](https://publiq.stoplight.io/docs/authentication/docs/client-access-token.md) for more info."
      }
    },
    "parameters": {
      "eventId": {
        "name": "eventId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "F2D5D20C-CC98-4979-9CD2-453ABAD979B5"
        },
        "description": "Unique id of an event, in the format of a UUID"
      },
      "placeId": {
        "name": "placeId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "F2D5D20C-CC98-4979-9CD2-453ABAD979B5"
        },
        "description": "Unique id of an place, in the format of a UUID"
      },
      "organizerId": {
        "name": "organizerId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "F2D5D20C-CC98-4979-9CD2-453ABAD979B5"
        },
        "description": "Unique id of an organizer, in the format of a UUID"
      },
      "articleId": {
        "name": "articleId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
        },
        "description": "Unique id of a news article, in the format of a UUID"
      },
      "language": {
        "name": "language",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "nl",
            "fr",
            "en",
            "de"
          ]
        },
        "description": "The language of the request body properties"
      },
      "labelName": {
        "name": "labelName",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "MyLabel",
          "pattern": "^(?=.{2,255}$)(?=.*\\S.*\\S.*)[^;]*$"
        },
        "description": "The label to add to an event, place or organizer. The label name should be longer than 1 character but shorter than 255 characters. The label name should not contain semicolons."
      },
      "videoId": {
        "name": "videoId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "F2D5D20C-CC98-4979-9CD2-453ABAD979B5"
        },
        "description": "Unique id of a video embedded in a place or event, in the format of a UUID"
      },
      "termId": {
        "name": "termId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Unique id of a taxonomy term. Taxonomy terms are pre-defined and can be found using our [Terms](./docs/terms.md) guide"
      },
      "imageId": {
        "name": "imageId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "example": "365f99a4-5490-4313-8ee9-adebea2dceb0"
        },
        "description": "The unique uuid of an already uploaded image."
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized. Your request is missing the required credentials to authenticate. See the Authentication documentation for more info.\n\n* type: https://api.publiq.be/probs/auth/unauthorized\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Example": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/unauthorized",
                  "title": "Unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. Your request was successfully authenticated but you do not have permission to perform this particular request.\n\n* type: https://api.publiq.be/probs/auth/forbidden\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Example": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/forbidden",
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "user must be admin of organizer abcd1234"
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource (URL) could not be found.\nThis can be due to one of multiple reasons:\n\n* The endpoint has a typo and/or does not exist on the API\n* One of the path parameters contains a value that is invalid or does not exist\n* One of the required query parameters is missing\n* One of the query parameters has an invalid value\n\nThe `detail` property of the response should contain more specific information.\n\nThe `type` will always be `https://api.publiq.be/probs/url/not-found`.",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Example": {
                "value": {
                  "type": "https://api.publiq.be/probs/url/not-found",
                  "title": "URL not found",
                  "status": 404,
                  "detail": "The resource with id \"76C6AC08-763C-492E-A68C-CBC43A857229\" was not found."
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Events"
    },
    {
      "name": "News articles"
    },
    {
      "name": "Organizers"
    },
    {
      "name": "Places"
    }
  ]
}
